let mapleader = ","
let maplocalleader = "\<space>"

"https://github.com/tmux/tmux/issues/1246
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

let g:python3_host_prog=substitute(system("which python3"), "\n", '', 'g')

" Specify the behavior when switching between buffers
try
  set switchbuf=uselast
  set stal=2
catch
endtry

" Return to last edit position when opening files (You want this!)
autocmd! BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
command! SearchPanel :lua require('spectre').open()<CR>
command! Br :FloatermNew --autoclose=1 br<cr>
command! FormatJson :%!format_json.py

function! <SID>BufcloseCloseIt()
  let l:currentBufNum = bufnr("%")
  let l:alternateBufNum = bufnr("#")

  if buflisted(l:alternateBufNum)
    buffer #
  else
    bnext
  endif

  if bufnr("%") == l:currentBufNum
    new
  endif

  if buflisted(l:currentBufNum)
    execute("bdelete! ".l:currentBufNum)
  endif
endfunction

function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction

function! Ssh(cmd, hosts)
  for i in a:hosts
    execute "enew"
    execute "read !ssh " . i . ' ' . a:cmd
    execute 'file ssh-' . i . '-' . a:cmd
  endfor
endfunction

function! FindFileInTree()
  if exists(":Neotree")
    execute "Neotree reveal"
  elseif exists(":NvimTreeFindFile")
    execute "NvimTreeFindFile"
  elseif exists(":NERDTreeTabsFind")
    execute "NERDTreeMirrorOpen"
    execute "NERDTreeTabsFind"
  endif
endfunction

function! EditTodayNote() abort
  let path = "~/notes/journals/"
  let file_name = path.strftime("%Y-%m-%d.md")
  " Empty buffer
  if filereadable(expand(file_name))
    execute "e ".fnameescape(file_name)
  else
    call system("cp '~/notes/templates/daily template.md' ~/notes/journals/".fnameescape(file_name))
    execute "e ".fnameescape(file_name)
  endif
endfunction

set background=light

if executable("fish") == 1
  set shell=fish
elseif executable("zsh") == 1
  set shell=zsh
endif

cabbrev h vert h

let g:indent_blankline_buftype_exclude = ['terminal']
let g:indent_blankline_filetype_exclude=['help', 'NvimTree', 'vista', 'floaterm', 'neo-tree']
let g:indent_blankline_char_list = ['|', '¦', '┆', '┊']
let g:indent_blankline_use_treesitter = v:true
let g:blameLineUseVirtualText = 1
let g:blameLineGitFormat = '%an - %h - %s'

let g:loaded_python_provider = 0
let g:loaded_python3_provider = 0
let g:loaded_perl_provider = 0
let g:loaded_ruby_provider = 0
let g:loaded_node_provider = 0

{% if nvim %}
silent! call plug#begin('~/.config/nvim/plugged')
{% else %}
silent! call plug#begin('~/.vim/plugged')
{% endif %}
if executable("gcc")
Plug 'https://github.com/lewis6991/impatient.nvim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate all'}
Plug 'LhKipp/nvim-nu', {'do': ':TSInstall nu'}
Plug 'https://github.com/danymat/neogen'
Plug 'https://github.com/p00f/nvim-ts-rainbow'
Plug 'mizlan/iswap.nvim'
Plug 'nvim-treesitter/nvim-treesitter-textobjects'
Plug 'https://github.com/theHamsta/nvim-treesitter-pairs'
Plug 'romgrk/nvim-treesitter-context'
Plug 'nvim-treesitter/playground'
Plug 'nvim-treesitter/nvim-treesitter-refactor'
Plug 'https://github.com/David-Kunz/treesitter-unit'
"Yet another tree-sitter powered indent plugin for Neovim.
Plug 'https://github.com/yioneko/nvim-yati'
Plug 'SmiteshP/nvim-gps'
Plug 'm-demare/hlargs.nvim'
Plug 'https://github.com/kylechui/nvim-surround'
Plug 'https://github.com/smjonas/live-command.nvim'
Plug 'https://github.com/LhKipp/nvim-nu', {'do': ':TSInstall nu'}
Plug 'https://github.com/bennypowers/nvim-regexplainer'
endif

" Seamlessly jump between matched instances.
Plug 'kevinhwang91/nvim-hlslens', {'branch': 'main'}
Plug 'mfussenegger/nvim-dap'
Plug 'mfussenegger/nvim-dap-python'
Plug 'rcarriga/nvim-dap-ui'
" status line
Plug 'https://github.com/nvim-lualine/lualine.nvim'
" Plug 'https://github.com/fgheng/winbar.nvim'

" A search panel for neovim.
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim', { 'tag': '*' }
Plug 'dawsers/telescope-floaterm.nvim'
Plug 'kkharji/sqlite.lua'

Plug 'windwp/nvim-spectre'
Plug 'https://github.com/sindrets/diffview.nvim'

" Easymotion-like
Plug 'https://github.com/phaazon/hop.nvim'
Plug 'monaqa/dial.nvim', {'on': ['DialIncrement', 'DialDecrement']}
Plug 'kyazdani42/nvim-tree.lua'

" neo-tree requires nui
Plug 'MunifTanjim/nui.nvim'
Plug 'https://github.com/nvim-neo-tree/neo-tree.nvim', {'tag': '*'}
Plug 'https://github.com/folke/noice.nvim', {'tag': '*'}
Plug 'https://github.com/miversen33/netman.nvim/', {'branch': 'main'}

" Change cursor based on mode
Plug 'https://github.com/melkster/modicator.nvim'

" Indent guides for Neovim
Plug 'https://github.com/lukas-reineke/indent-blankline.nvim', {'branch': 'master', 'on': 'IndentBlanklineEnable'}
Plug 'https://github.com/tveskag/nvim-blame-line'

" Due date
Plug 'NFrid/due.nvim'

" Comment
Plug 'https://github.com/numToStr/Comment.nvim'

Plug 'https://github.com/folke/which-key.nvim'
Plug 'https://github.com/romainl/vim-cool'

Plug 'kevinhwang91/promise-async'

" Fold
Plug 'https://github.com/kevinhwang91/nvim-ufo'

Plug 'towolf/vim-helm'

" markdown support with some fetures
" Plug 'https://github.com/SidOfc/mkdx'

" notify ui
Plug 'rcarriga/nvim-notify'

" Disable scrollbar. Not useful for me.
" Plug 'https://github.com/petertriho/nvim-scrollbar'
Plug 'https://github.com/Chaitanyabsprip/present.nvim'

Plug 'https://github.com/ojroques/nvim-osc52'

Plug 'jdhao/better-escape.vim'

Plug 'williamboman/mason.nvim'
Plug 'williamboman/mason-lspconfig.nvim'
Plug 'neovim/nvim-lspconfig'
Plug 'nvim-tree/nvim-web-devicons'
Plug 'https://github.com/glepnir/lspsaga.nvim'
" Plug 'https://git.sr.ht/~whynothugo/lsp_lines.nvim'
Plug 'kosayoda/nvim-lightbulb'
Plug 'nanotee/sqls.nvim'
" Plug 'jubnzv/virtual-types.nvim'
Plug 'https://github.com/simrat39/symbols-outline.nvim'
Plug 'https://github.com/folke/lsp-colors.nvim'
" Plug 'https://github.com/RRethy/vim-illuminate'
Plug 'jose-elias-alvarez/null-ls.nvim'

Plug 'https://github.com/dstein64/vim-startuptime'
Plug 'folke/persistence.nvim'

if empty($SSH_CLIENT)
  Plug 'blueyed/vim-diminactive' " use different background color for inactive window
else
endif

Plug 'https://github.com/nyngwang/NeoZoom.lua'

" Markdown table formaater
Plug 'https://github.com/junegunn/vim-easy-align'

" Emoji"
Plug 'yazgoo/unicodemoji'

" Git
Plug 'https://github.com/lambdalisue/gina.vim'
Plug 'https://github.com/akinsho/git-conflict.nvim'

" DB
Plug 'tpope/vim-dadbod', { 'on': ['DB']}
Plug 'kristijanhusak/vim-dadbod-ui', { 'on': ['DB']}

Plug 'https://github.com/kjelly/kube-nvim'
Plug 'voldikss/vim-floaterm'

" Switch true/flase
Plug 'AndrewRadev/switch.vim'

" An always-on highlight for a unique character in every word on a line
" to help you use f, F and family.
Plug 'unblevable/quick-scope'
Plug 'itchyny/calendar.vim', { 'on': 'Calendar'}
Plug 'vimwiki/vimwiki', { 'on': 'VimwikiIndex' }
Plug 'janko-m/vim-test', { 'on': ['TestFile','TestLast','TestNearest','TestSuite','TestVisit']}

Plug 'simeji/winresizer', { 'on': ['WinResizerStartResize', 'WinResizerStartMove']}
Plug 't9md/vim-choosewin'
Plug 'metakirby5/codi.vim'
Plug 'https://github.com/NvChad/nvim-colorizer.lua'

" Plug 'Shougo/vimproc.vim', {'do' : 'make'}

Plug 'https://github.com/NTBBloodbath/rest.nvim'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'https://github.com/ibhagwan/fzf-lua'


Plug 'https://codeberg.org/esensar/nvim-dev-container'

" For sudo
" :w suda://%
Plug 'lambdalisue/suda.vim', {'on': ['SudaRead', 'SudaWrite']}

" sudo pip3 install keyring browser-cookie3
Plug 'ianding1/leetcode.vim'

Plug 'https://github.com/m-gail/escape.nvim'

" colorscheme foramework
Plug 'rktjmp/lush.nvim'

" colorscheme
Plug 'sainnhe/gruvbox-material'
Plug 'gruvbox-community/gruvbox'
Plug 'folke/tokyonight.nvim'
Plug 'marko-cerovac/material.nvim'
Plug 'briones-gabriel/darcula-solid.nvim'
Plug 'rktjmp/lush.nvim'
Plug 'eddyekofo94/gruvbox-flat.nvim'
Plug 'https://github.com/Mofiqul/dracula.nvim'
Plug 'projekt0n/github-nvim-theme'
Plug 'yong1le/darkplus.nvim'
Plug 'ray-x/aurora'
Plug 'https://github.com/Pocco81/Catppuccino.nvim'
Plug 'frenzyexists/aquarium-vim', { 'branch': 'develop' }
Plug 'https://github.com/sainnhe/edge'
Plug 'yashguptaz/calvera-dark.nvim'
Plug 'https://github.com/sainnhe/everforest'
Plug 'https://github.com/navarasu/onedark.nvim'
Plug 'lourenci/github-colors'
Plug 'shaunsingh/moonlight.nvim'
Plug 'https://github.com/savq/melange'
Plug 'https://github.com/rmehri01/onenord.nvim'
Plug 'https://github.com/luisiacc/gruvbox-baby'
Plug 'https://github.com/Shatur/neovim-ayu'
Plug 'https://github.com/NTBBloodbath/doom-one.nvim'
Plug 'https://github.com/rockerBOO/boo-colorscheme-nvim'
Plug 'https://github.com/Everblush/everblush.nvim'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'shaunsingh/nord.nvim'
Plug 'titanzero/zephyrium'
Plug 'rockyzhang24/arctic.nvim'
Plug 'rebelot/kanagawa.nvim'
Plug 'https://github.com/Almo7aya/neogruvbox.nvim'
Plug 'https://github.com/bluz71/vim-nightfly-guicolors'
Plug 'https://github.com/cranberry-clockworks/coal.nvim'

" file explorer for ssh
Plug 'https://github.com/stevearc/oil.nvim'

if executable("fcitx") == 1
  Plug 'vim-scripts/fcitx.vim'
endif

{% if programming %}

Plug 'tpope/vim-fugitive'
Plug 'cohama/agit.vim', { 'on':  ['Agit', 'AgitFile'] }
Plug 'https://github.com/pwntester/octo.nvim'

Plug 'mbbill/undotree', { 'on': ['UndotreeToggle']}

" Bookmarks and marks
" Disable this to use float floaterm.
Plug 'https://github.com/chentoast/marks.nvim'

{% if nvim %}

if has('python3')
  Plug 'vim-vdebug/vdebug', { 'on': 'VdebugStart'}
endif

Plug 'https://github.com/zbirenbaum/copilot.lua'
Plug 'https://github.com/zbirenbaum/copilot-cmp'

Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/nvim-cmp'
Plug 'lukas-reineke/cmp-rg'
Plug 'https://github.com/petertriho/cmp-git'
Plug 'https://github.com/mtoohey31/cmp-fish', { 'for': 'fish'}
Plug 'https://github.com/dmitmel/cmp-cmdline-history'
Plug 'https://github.com/hrsh7th/cmp-nvim-lsp-document-symbol'
Plug 'ray-x/lsp_signature.nvim'
Plug 'saadparwaiz1/cmp_luasnip'

Plug 'https://github.com/windwp/nvim-autopairs'
Plug 'rafamadriz/friendly-snippets'
Plug 'https://github.com/L3MON4D3/LuaSnip'
Plug 'tzachar/cmp-tabnine', { 'do': './install.sh' }
" Plug 'https://github.com/hrsh7th/cmp-copilot'
Plug 'https://github.com/gfanto/fzf-lsp.nvim'
Plug 'https://github.com/stevearc/aerial.nvim'
Plug 'https://github.com/onsails/lspkind.nvim'
Plug 'https://github.com/gaoDean/autolist.nvim'
Plug 'https://github.com/gbrlsnchs/winpick.nvim'

{% else %}

{% endif %}

{% else %}

{% endif %}
{% if nvim %}
Plug 'mhinz/neovim-remote'

{% endif %}


call plug#end()

set nu
set keywordprg=sdcvh.sh
set cursorline
set showcmd
set mouse=a
set mousemodel="extend"

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Remember info about register, marks. And no highlight when started
set viminfo=<800,'10,h

" Show tab line if there are more than one tab
set showtabline=0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set dir=~/.vim_cache/swapfiles
set backup
set backupdir=~/.vim_cache
set undodir=~/.vim_cache
set undofile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Ignore compiled files
set wildignore=*.o,*~,*.pyc

" Height of the command bar
set cmdheight=1

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
" set whichwrap+=<,>

" When searching try to be smart about cases
set smartcase

" Don't redraw while executing macros (good performance config)
set nolazyredraw

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

set tm=500

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set expandtab
set smarttab

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2

" Linebreak on 500 characters
set lbr
set tw=500

set si "Smart indent
set wrap "Wrap lines

" Always show the status line
set laststatus=3

" The time in milliseconds that is waited for
" a mapped sequence to complete.
set timeoutlen=500
set updatetime=300
set completeopt=menu,menuone,noselect
set listchars=tab:►\ ,trail:~,extends:>,precedes:<
set list
set sessionoptions=buffers,curdir,tabpages,winsize,globals
" suppress the annoying 'match x of y', 'The only match' and 'Pattern not
" found' messages
" or don't give |ins-completion-menu| messages.
set shortmess=sTWAIFS
" always show signcolumns
set signcolumn=yes
set noshowmode
{% if nvim %}
set inccommand=split
set winblend=0
set pumblend=0
{% endif %}

" Let fzf ignore the files which is ignored by gitignore or hgignore
if executable("ag") == 1
  let $FZF_DEFAULT_COMMAND='ag -g ""'
endif
if executable('rg')
  let &grepprg = "rg --vimgrep"
  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden'
endif

let $BROWSER='w3m'
let $IN_VIM=1

{% if nvim %}let g:test#strategy = "neovim" {% endif %}

let g:leetcode_solution_filetype='python3'
let g:floaterm_wintype='split'
let g:floaterm_position='top'
let g:floaterm_width=1.0
let g:floaterm_height=0.5
let g:floaterm_autoinsert = v:false

" Autocmd

{% if nvim %}
function! WinLeaveAction()
  if &filetype=='fzf' | wincmd q
  endif
endfunction

{% endif %}

function AutoDec1()
  execute "Dec1"
  set filetype=markdown
endfunction
" autocmd! BufReadPost,FileReadPost *.smd call AutoDec1()
" autocmd! BufWritePre,FileWritePre *.smd Enc1
" autocmd! BufWritePost,FileWritePost *.smd call AutoDec1()

augroup basic
  autocmd!
  autocmd! TermOpen * setlocal nonu norelativenumber | setlocal signcolumn=no
  autocmd! WinLeave * call WinLeaveAction()
  autocmd! BufWritePost worksapce.vim source workspace.vim

  au! BufRead */tasks/*.yaml,*/tasks/*.yml set ft=yaml.ansible
  au! BufRead *.yaml,*.yml if search('hosts:\|tasks:\|roles:', 'nw') | set ft=yaml.ansible | endif
  autocmd! BufWritePost *.py if executable("isort") && exists("g:isort") | execute "silent !isort %" | endif
  auto WinEnter * silent lua UpdateTitleString()
augroup end

augroup rest_nvim
  autocmd FileType http nnoremap <buffer> <localleader>rr <Plug>RestNvim<cr>
  autocmd FileType http nnoremap <buffer> <localleader>rl <Plug>RestNvimLast<cr>
  autocmd FileType http nnoremap <buffer> <localleader>rp <Plug>RestNvimPreview<cr>
augroup end

augroup Binary
  au!
  au! BufReadPre  *.bin let &bin=1
  au! BufReadPost *.bin if &bin | %!xxd
  au! BufReadPost *.bin set ft=xxd | endif
  au! BufWritePre *.bin if &bin | %!xxd -r
  au! BufWritePre *.bin endif
  au! BufWritePost *.bin if &bin | %!xxd
  au! BufWritePost *.bin set nomod | endif
augroup END

command! ClearBuffer bufdo if ((expand("%p") == '' || !filereadable(expand("%p"))) && &modified == 0) | bdelete | endif

" num toggle
command! Nu execute "call Num_Toggle()"

"Quit
command! Q execute "quit!"
command! Qa execute "quitall!"

" Sudo to write
command! W :w !sudo tee % >/dev/null

command! Cd1 :cd ..
command! Cd2 :cd ../..
command! Cd3 :cd ../../..
command! E :Explore

" Diff between the curret buffer and the file.
com! Diff call s:DiffWithSaved()

function! OpenChangedFiles()
  only " Close all windows, unless they're modified
  let status = system('git status -s | grep "^ \?\(M\|A\)" | cut -d " " -f 3')
  let filenames = split(status, "\n")

  if len(filenames) < 1
    let status = system('git show --pretty="format:" --name-only')
    let filenames = split(status, "\n")
  endif

  exec "edit " . filenames[0]

  for filename in filenames[1:]
    if len(filenames) > 4
      exec "tabedit " . filename
    else
      exec "sp " . filename
    endif
  endfor
endfunction
command! OpenChangedFiles :call OpenChangedFiles()

command! Enc execute '%!openssl enc -aes-256-cbc -a -salt -pass file:$HOME/.ssh/passwd.txt'
command! Enc1 execute '%!openssl enc -pbkdf2 -a -salt -pass file:$HOME/.ssh/passwd.txt'
command! Dec execute '%!openssl enc -d -aes-256-cbc -a -salt -pass file:$HOME/.ssh/passwd.txt'
command! Dec1 execute '%!openssl enc -d -pbkdf2 -a -salt -pass file:$HOME/.ssh/passwd.txt'

command! Vifm FloatermNew vifm -c only
command! NNN FloatermNew nnn
command! FFF FloatermNew fff

{% include './templates/keybindings.vim' %}
{% include './templates/keybindings_leader.vim' %}

let g:MYVIMRC_DIR = fnamemodify(expand('$MYVIMRC'), ':h')
let $PATH .= ':' . fnamemodify(expand('$MYVIMRC'), ':h') . '/bin'
let $GIT_PAGER='tac'
let $PAGER='tac'

let g:switch_mapping = ""
let g:switch_custom_definitions =
    \ [
    \   ['yes', 'no'],
    \   ['Yes', 'No'],
    \   ['YES', 'NO'],
    \   ['True', 'False'],
    \   ['TRUE', 'FALSE'],
    \   ['on', 'off'],
    \   ['On', 'Off'],
    \   ['ON', 'OFF'],
    \   ['[ ]', '[x]'],
    \   ['TODO', 'WORKING','DONE'],
    \ ]

let g:any_jump_disable_default_keybindings = 1
let g:any_jump_preview_lines_count = 5
let g:any_jump_window_width_ratio  = 0.8
let g:any_jump_window_height_ratio = 0.8

command! -bang -nargs=* NoteSearch
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case -- '.shellescape(<q-args>).' ~/notes', 1,
  \   fzf#vim#with_preview(), <bang>0)

command! Note :Files ~/notes

command! DisableTmuxKey
         \ call jobstart('set-tmux-prefix -k F1 -t 20', {
         \    'on_exit': { j,d,e ->
         \       execute('echom "enable tmux key"', '')
         \    }
         \ })

let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
let g:better_escape_shortcut = 'jk'
let g:fzf_colors = {'gutter': ['bg', 'Normal']}
let g:fzf_floaterm_newentries = {
  \ '+root' : {
    \ 'title': 'Root Shell',
    \ 'cmd': 'sudo sh' },
  \ }
let g:mkdx#settings = { 'map': { 'enable': 1, 'prefix': '<leader>md' }, 'checkbox': { 'toggles': [' ', 'x'] } }

set title

if has("nvim-0.9.0")
  set splitkeep=screen
endif

" Results:  :copen, :cn, :cp
" Ex: :grep -f c++/comments %
" Ex: :grep -tc++ FIXME
if executable('ugrep')
    set grepprg=ugrep\ -RInk\ -j\ -u\ --tabs=1\ --ignore-files
    set grepformat=%f:%l:%c:%m,%f+%l+%c+%m,%-G%f\\\|%l\\\|%c\\\|%m
endif

" Yank to system clipboard with Y
nnoremap yy yy
vnoremap y y
nnoremap YY "+yy
nnoremap Y "+y
vnoremap Y "+y

{% if nvim %}
exec 'luafile' g:MYVIMRC_DIR . '/config.lua'
{% endif %}
colorscheme gruvbox
silent! source ~/.vim_custom.vim

" hightlight
highlight! link HopNextKey Error
highlight! link HopNextKey1 Error
highlight! link HopNextKey2 Error
highlight! link WinSeparator Boolean
