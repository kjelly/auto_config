let mapleader = ","
let maplocalleader = "\<space>"

" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set t_Co=256
    set t_ut=
    set guitablabel=%M\ %t
endif

"https://github.com/tmux/tmux/issues/1246
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif


" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry


" Return to last edit position when opening files (You want this!)
autocmd! BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif


" Do :help cope if you are unsure what cope is. It's super useful!
"
" When you search with vimgrep, display your results in cope by doing:
"   <leader>cc
"
" To go to the next search result do:
"   <leader>n
"
" To go to the previous search results do:
"   <leader>p

"nnoremap <leader>gcc :botright cope<cr>
"nnoremap <leader>gco ggVGy:tabnew %<cr>:set syntax=qf<cr>pgg
"nnoremap <leader>gn :cn<cr>
"nnoremap <leader>gp :cp<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
command! SearchPanel :lua require('spectre').open()<CR>

function! <SID>BufcloseCloseIt()
  let l:currentBufNum = bufnr("%")
  let l:alternateBufNum = bufnr("#")

  if buflisted(l:alternateBufNum)
    buffer #
  else
    bnext
  endif

  if bufnr("%") == l:currentBufNum
    new
  endif

  if buflisted(l:currentBufNum)
    execute("bdelete! ".l:currentBufNum)
  endif
endfunction

function! Num_Toggle()
  exe "NumbersToggle"
  exe "set number!"
endfunction

function! ToggleMouse()
    " check if mouse is enabled
    if &mouse == 'a'
        " disable mouse
        set mouse=
    else
        " enable mouse everywhere
        set mouse=a
    endif
endfunc

function! ToggleStatusLine()
    if &laststatus==0
        set laststatus=2
    else
        set laststatus=0
    endif
endfunc

function! ToggleForCopy()
    if &nu==0
        set nu!
        set signcolumn=yes
        exec 'IndentLinesEnable'
    else
        set nu!
        set signcolumn=no
        exec 'IndentLinesDisable'
    endif
endfunc

function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction

function! Ssh(cmd, hosts)
  for i in a:hosts
    execute "enew"
    execute "read !ssh " . i . ' ' . a:cmd
    execute 'file ssh-' . i . '-' . a:cmd
  endfor
endfunction

if has('gui_running')
    set background=light
else
    set background=dark
endif

{% if nvim %}
{% else %}

if &shell =~# 'fish$'
  set shell=sh
endif

{% endif %}

let g:polyglot_disabled = ['ansible']
let g:floaterm_autoinsert = v:false
let g:sneak#label = 1

imap <C-f> <Plug>(coc-snippets-expand)
imap <C-f> <Plug>(coc-snippets-expand-jump)
let g:coc_snippet_next = '<c-f>'
let g:coc_snippet_prev = '<c-b>'
let bufferline = get(g:, 'bufferline', {})
let bufferline.icons = v:false
let bufferline.icon_custom_colors = v:false
let bufferline.tabpages = v:false
let bufferline.closable = v:true
let bufferline.icon_separator_active = '|‚úÖ'
let bufferline.icon_separator_inactive = '|'
let bufferline.icon_close_tab = 'x'
let bufferline.icon_close_tab_modified ='‚óè'

let g:nvim_tree_icons = {
    \ 'default': 'üìÉ',
    \ 'symlink': 'üîó',
    \ 'git': {
    \   'unstaged': "üìù",
    \   'staged': "‚úÖ",
    \   'unmerged': "üéå",
    \   'renamed': "„à¥",
    \   'untracked': "üö©",
    \   'deleted': "‚å¶",
    \   'ignored': "üßπ"
    \   },
    \ 'folder': {
    \   'default': "üìÅ",
    \   'open': "üìÇ",
    \   'empty': "ü™£",
    \   'empty_open': "ü™£",
    \   'symlink': "üåì",
    \   'symlink_open': "üåï",
    \   },
    \   'lsp': {
    \     'hint': "üí°",
    \     'info': "üí¨",
    \     'warning': "üî∫",
    \     'error': "‚ùå",
    \   }
    \ }


let g:indent_blankline_char_highlight_list = ['Function', 'Variable']
let g:blameLineUseVirtualText = 1

set nocompatible              " be improved
filetype off                  " required before plugins

{% if nvim %}
silent! call plug#begin('~/.config/nvim/plugged')
{% else %}
silent! call plug#begin('~/.vim/plugged')
{% endif %}
if has('nvim-0.5')
  if executable('tree-sitter')
    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate all'}
  endif
  Plug 'kevinhwang91/nvim-hlslens', {'branch': 'main'}
  Plug 'mfussenegger/nvim-dap'
  Plug 'mfussenegger/nvim-dap-python'
  Plug 'hoob3rt/lualine.nvim'
  " Plug 'Shougo/denite.nvim'
  Plug 'nvim-lua/popup.nvim'
  Plug 'nvim-lua/plenary.nvim'
  Plug 'windwp/nvim-spectre'
  "Jump to any definition and references IDE madness without overhead
  Plug 'pechorin/any-jump.nvim'
  Plug 'akinsho/nvim-bufferline.lua'
  Plug 'windwp/nvim-autopairs'
  Plug 'monaqa/dial.nvim'
  Plug 'https://github.com/phaazon/hop.nvim'
  Plug 'https://github.com/rmagatti/auto-session'
  Plug 'kyazdani42/nvim-tree.lua'
  Plug 'tversteeg/registers.nvim'
  Plug 'https://github.com/lukas-reineke/indent-blankline.nvim', {'branch': 'lua'}
  Plug 'tveskag/nvim-blame-line'
  Plug 'b3nj5m1n/kommentary'
else
  Plug 'itchyny/lightline.vim'
  Plug 'kjelly/auto-pairs'
  Plug 'tpope/vim-speeddating'
  Plug 'justinmk/vim-sneak'
  Plug 'thaerkh/vim-workspace'
  Plug 'scrooloose/nerdtree', { 'on':  ['NERDTreeToggle', 'NERDTreeTabsToggle', 'NERDTreeMirrorOpen', 'NERDTreeTabsFind'] }
  Plug 'jistr/vim-nerdtree-tabs', { 'on':  ['NERDTreeToggle', 'NERDTreeTabsToggle', 'NERDTreeMirrorOpen', 'NERDTreeTabsFind'] }
  " Show register content when pressing " or <c-r>
  Plug 'junegunn/vim-peekaboo'
  Plug 'Yggdroot/indentLine'
" use <c-/> for toggling comment
  Plug 'tomtom/tcomment_vim'
  Plug 'google/vim-searchindex'
endif
if empty($SSH_CLIENT)
  Plug 'ryanoasis/vim-devicons'
  Plug 'kyazdani42/nvim-web-devicons'
  Plug 'blueyed/vim-diminactive' " use different background color for inactive window
endif

Plug 'adelarsq/vim-emoji-icon-theme'
Plug 'yazgoo/unicodemoji'

Plug 'tpope/vim-dadbod', { 'on': ['DB']}
Plug 'kristijanhusak/vim-dadbod-ui', { 'on': ['DB']}

Plug 'mhinz/vim-signify' " show git diff

Plug 'voldikss/vim-floaterm'
"Plug 'dominikduda/vim_current_word'
Plug 'liuchengxu/vim-which-key'
"Autojump to 1st non-blank when j/k into leading spaces.
"Plug 'fcpg/vim-shore'
Plug 'AndrewRadev/switch.vim'

" + for expand, _ for shrink
Plug 'terryma/vim-expand-region'
Plug 'unblevable/quick-scope'
Plug 'itchyny/calendar.vim', { 'on': 'Calendar'}
Plug 'vimwiki/vimwiki', { 'on': 'VimwikiIndex' }
" Plug 'jceb/vim-orgmode'
" Plug 'fidian/hexmode'
Plug 'janko-m/vim-test', { 'on': ['TestFile','TestLast','TestNearest','TestSuite','TestVisit']}
Plug 'mhinz/vim-grepper', { 'on': ['Grepper', '<plug>(GrepperOperator)'] }
Plug 'simeji/winresizer'
"Plug 'pseewald/vim-anyfold'
Plug 't9md/vim-choosewin'
Plug 'john-nanney/pushd.vim'
Plug 'metakirby5/codi.vim'
Plug 'chrisbra/Colorizer', { 'on': ['ColorToggle'] }
" Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'MattesGroeger/vim-bookmarks'

" Disable vaffle.newrw support remote edit but vaffle not.
"Plug 'cocopon/vaffle.vim'
" Helper for netrw. I use vaffle. It will useless
Plug 'tpope/vim-vinegar'
" This support rclone.
"Plug 'ipod825/vim-netranger'


" set filetype=rest
" <c-j> for send request
" http://localhost:9200
" POST /testindex/testtype
" {
"   "key": "new key",
"   "value": "new value"|
" }
Plug 'diepm/vim-rest-console'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
"Plug 'ctrlpvim/ctrlp.vim'

" For sudo
" :w suda://%
Plug 'lambdalisue/suda.vim'

" sudo pip3 install keyring browser-cookie3
Plug 'ianding1/leetcode.vim'

" colorscheme
Plug 'joshdick/onedark.vim'
Plug 'liuchengxu/space-vim-dark' " Good
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'tyrannicaltoucan/vim-deep-space'
Plug 'bluz71/vim-moonfly-colors'
Plug 'sainnhe/gruvbox-material'
Plug 'ayu-theme/ayu-vim'
Plug 'cocopon/iceberg.vim'
Plug 'arcticicestudio/nord-vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'gruvbox-community/gruvbox'
Plug 'romgrk/doom-one.vim'
Plug 'folke/tokyonight.nvim'
Plug 'Sammyalhashe/random_colorscheme.vim'


" Lang
"Plug 'dag/vim-fish'
"Plug 'ekalinin/Dockerfile.vim'
"Plug 'ensime/ensime-vim', { 'do': ':UpdateRemotePlugins' }
"Plug 'artur-shaik/vim-javacomplete2', { 'for': 'java' }
"Plug 'fatih/vim-go', { 'for': 'go' }
"Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
"Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
"Plug 'HerringtonDarkholme/yats.vim', { 'for': 'typescript' } " typescript
"Plug 'Glench/Vim-Jinja2-Syntax'
"Plug 'derekwyatt/vim-scala'
"Plug 'mxw/vim-jsx'
"Plug 'kjelly/vim-mecury-lang'
"Plug 'rust-lang/rust.vim'
"Plug 'racer-rust/vim-racer'
"Plug 'udalov/kotlin-vim'
"Plug 'dart-lang/dart-vim-plugin'
"Plug 'keith/swift.vim'
"Plug 'gre/play2vim'
"Plug 'pearofducks/ansible-vim', { 'for': 'ansible' }
"Plug 'hashivim/vim-vagrant'
"Plug 'sheerun/vim-polyglot'


if executable("fcitx") == 1
  Plug 'vim-scripts/fcitx.vim'
endif

{% if programming %}

Plug 'tpope/vim-fugitive'
Plug 'cohama/agit.vim', { 'on':  ['Agit', 'AgitFile'] }
" Plug 'godlygeek/tabular', { 'on': 'Tabularize' }
Plug 'majutsushi/tagbar', { 'on':  ['Tagbar'] }
" emmet `<c-y>,` for expand `div>a` to `<div><a></a></div>
Plug 'mattn/emmet-vim'
" Useful for handling tag
Plug 'tpope/vim-surround'

Plug 'mbbill/undotree', { 'on': ['UndotreeToggle']}

" Plugin to toggle, display and navigate marks
Plug 'kshenoy/vim-signature'

{% if nvim %}

if has('python3')
  Plug 'vim-vdebug/vdebug', { 'on': 'VdebugStart'}
endif

Plug 'pechorin/any-jump.nvim'
Plug 'honza/vim-snippets'

if executable('node')
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  " Highlight symbol under cursor on CursorHold
  autocmd CursorHold * silent call CocActionAsync('highlight')
endif

" project-wide async search and replace
" `,ff` for esearch.
Plug 'eugen0329/vim-esearch'


{% else %}

{% endif %}

{% else %}

{% endif %}
{% if nvim %}
Plug 'mhinz/neovim-remote'
Plug 'kassio/neoterm'

{% endif %}


call plug#end()

silent! call denite#custom#map('insert', '<C-j>', '<denite:move_to_next_line>', 'noremap')
silent! call denite#custom#map('insert', '<C-k>', '<denite:move_to_previous_line>', 'noremap')

syntax enable
filetype plugin indent on     " required!


set nu
set keywordprg=sdcvh.sh
"set whichwrap+=h,l
set whichwrap+=<,>,[,],s,b
set cursorline
set showcmd
set mouse=

" Show tab line if there are more than one tab
set showtabline=1

" Set utf8 as standard encoding and en_US as the standard language
if !has('nvim')
    set encoding=utf8
endif

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Remember info about register, marks. And no highlight when started
set viminfo=<800,'10,h

" Show tab line if there are more than one tab
set showtabline=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set dir=~/.vim_cache/swapfiles
set backup
set backupdir=~/.vim_cache
set undofile
set undodir=~/.vim_cache

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Turn on the WiLd menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc

"Always show current position
set ruler

" Height of the command bar
set cmdheight=1

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set tm=500

" Sets how many lines of history VIM has to remember
set history=700

" Set to auto read when a file is changed from the outside
set autoread

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=2
set tabstop=2

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set nowrap "Wrap lines

" Always show the status line
set laststatus=2

" The time in milliseconds that is waited for
" a mapped sequence to complete.
set timeoutlen=500
set updatetime=300

set completeopt+=noinsert
set completeopt-=preview
set listchars=tab:>-,trail:~,extends:>,precedes:<
set list
set foldlevel=9
set sessionoptions=buffers,curdir,tabpages,winsize,globals
" suppress the annoying 'match x of y', 'The only match' and 'Pattern not
" found' messages
" or don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes
set encoding=UTF-8
{% if nvim %}
set inccommand=nosplit
{% endif %}

if executable("fish") == 1
  set shell=fish
endif

let @/ = ""
let anyfold_activate=1
let anyfold_fold_comments=1
let NERDTreeMapOpenInTab='<TAB>'
let g:nerdtree_tabs_focus_on_files=1
let g:ale_python_pylint_options="--disable=C0111,C0103,C1801,C0325"

"let g:vimshell_prompt_expr =
"\ 'escape(fnamemodify(getcwd(), ":~").">", "\\[]()?! ")." "'
"let g:vimshell_prompt_pattern = '^\%(\f\|\\.\)\+> '

" Let fzf ignore the files which is ignored by gitignore or hgignore
if executable("ag") == 1
  let $FZF_DEFAULT_COMMAND='ag -g ""'
endif
if executable('rg')
    let &grepprg = "rg --vimgrep"
endif

let base_wiki = {}
let base_wiki.path = '~/vimwiki'
let base_wiki.syntax = 'markdown'
let base_wiki.ext = '.md'
let base_wiki.nested_syntaxes = {'python': 'python', 'c++': 'cpp', 'sh': 'sh', 'typescript': 'typescript', 'javascript': 'js', 'scala': 'scala', 'vim': 'vim'}
let daily = {}
let daily.path = '~/secret/notes/'
let daily.syntax = 'markdown'
let daily.ext = '.md'
let daily.nested_syntaxes = {'python': 'python', 'c++': 'cpp', 'sh': 'sh', 'typescript': 'typescript', 'javascript': 'js', 'scala': 'scala', 'vim': 'vim'}
let g:vimwiki_list = [base_wiki, daily]



" Markdown tag bar
let g:tagbar_type_markdown = {
    \ 'ctagstype' : 'markdown',
    \ 'kinds' : [
        \ 'h:Heading_L1',
        \ 'i:Heading_L2',
        \ 'k:Heading_L3'
    \ ]
    \ }

let g:tagbar_type_vimwiki = {
    \ 'ctagstype' : 'markdown',
    \ 'kinds' : [
        \ 'h:Heading_L1',
        \ 'i:Heading_L2',
        \ 'k:Heading_L3'
    \ ]
    \ }

let g:bookmark_no_default_key_mappings = 1

let g:go_list_type = "quickfix"

{% if python2_exec is defined and python3_exec.exist %}
let g:python_host_prog='{{ python2_exec.path }}'
{% endif %}
{% if python3_exec is defined and python3_exec.exist %}
let g:python3_host_prog='{{ python3_exec.path }}'
{% endif %}

let $BROWSER='w3m'
let $IN_VIM=1
let $HTERM_TTY=substitute(system("tty < /proc/" . getpid() . "/fd/0"), '\n$', '', '')
" let g:AutoPairsFlyMode = 1
" let g:AutoPairsShortcutToggle = ''
" let g:AutoPairsShortcutFastWrap = ''
" let g:AutoPairsShortcutJump = ''
" let g:AutoPairsMapCh = ''
" let g:AutoPairsMapSpace = ''
" let g:AutoPairsShortcutBackInsert ='<M-\>'

" vim-rest-console
let g:vrc_keepalt = 1
let g:vrc_curl_opts = {
  \ '-sS': '',
  \ '--connect-timeout': 10,
  \}

let g:NERDTreeWinSize=20

{% if nvim %}let test#strategy = "neovim" {% endif %}

let g:leetcode_solution_filetype='python3'
let g:floaterm_width=0.9
let g:floaterm_height=0.9


" Autocmd
autocmd! InsertLeave,WinEnter * set cursorline

{% if nvim %}
function! WinLeaveAction()
  if &filetype=='floaterm' | :FloatermHide<cr>
  endif
  if &filetype=='fzf' | wincmd q
  endif
endfunction

autocmd! WinLeave * call WinLeaveAction()
autocmd! TermLeave * if &filetype=='fzf' | wincmd q| endif
{% endif %}

autocmd! bufwritepost .vimrc source %
autocmd! bufwritepost init.vim source %
autocmd! CursorHold * checktime

autocmd! BufCreate __REST_response__ vertical resize 20
autocmd! BufCreate __REST_response__ set nonu
autocmd! BufEnter __REST_response__ set modifiable
autocmd! FileType tagbar vertical resize 20
autocmd! BufLeave * if expand("<afile>") == "" && &modified == 0 | bdelete | endif

augroup Binary
  au!
  au! BufReadPre  *.bin let &bin=1
  au! BufReadPost *.bin if &bin | %!xxd
  au! BufReadPost *.bin set ft=xxd | endif
  au! BufWritePre *.bin if &bin | %!xxd -r
  au! BufWritePre *.bin endif
  au! BufWritePost *.bin if &bin | %!xxd
  au! BufWritePost *.bin set nomod | endif
augroup END

" num toggle
command! Nu execute "call Num_Toggle()"

"Quit
command! Q execute "quit!"
command! Qa execute "quitall!"

" Sudo to write
command! W :w !sudo tee % >/dev/null

command! Cd1 :cd ..
command! Cd2 :cd ../..
command! Cd3 :cd ../../..
command! E :Explore

" Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --ignore-file .gitignore --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

" Diff between the curret buffer and the file.
com! Diff call s:DiffWithSaved()

function! OpenChangedFiles()
  only " Close all windows, unless they're modified
  let status = system('git status -s | grep "^ \?\(M\|A\)" | cut -d " " -f 3')
  let filenames = split(status, "\n")

  if len(filenames) < 1
    let status = system('git show --pretty="format:" --name-only')
    let filenames = split(status, "\n")
  endif

  exec "edit " . filenames[0]

  for filename in filenames[1:]
    if len(filenames) > 4
      exec "tabedit " . filename
    else
      exec "sp " . filename
    endif
  endfor
endfunction
command! OpenChangedFiles :call OpenChangedFiles()

command! Enc execute '%!openssl enc -aes-256-cbc -a -salt -pass file:$HOME/.ssh/passwd.txt'
command! Enc1 execute '%!openssl enc -pbkdf2 -a -salt -pass file:$HOME/.ssh/passwd.txt'
command! Dec execute '%!openssl enc -d -aes-256-cbc -a -salt -pass file:$HOME/.ssh/passwd.txt'
command! Dec1 execute '%!openssl enc -d -pbkdf2 -a -salt -pass file:$HOME/.ssh/passwd.txt'

command! Vifm FloatermNew vifm -c only
command! NNN FloatermNew nnn
command! FFF FloatermNew fff

" It doesn't work in terminal (neo)vim
hi VimwikiHeader1 guifg=Gray
hi VimwikiHeader2 guifg=Magenta
hi VimwikiHeader3 guifg=#30F30F
hi VimwikiHeader4 guifg=#B266FF
hi VimwikiHeader5 guifg=#00CC66
hi VimwikiHeader6 guifg=#FFFF00

{% include './templates/keybindings.vim' %}
{% include './templates/keybindings_leader.vim' %}

let g:which_key_map =  {}
let g:which_key_map.g = { 'name' : 'Git' }
let g:which_key_map.z = { 'name' : 'Grep/Find/FZF' }
let g:which_key_map.t = { 'name' : 'Tab' }
let g:which_key_map.b = { 'name' : 'Buffer/Bookmark' }
let g:which_key_map.c = { 'name' : 'Comment/cd' }
let g:which_key_map.q = { 'name' : 'Quit' }
let g:which_key_map.l = { 'name' : 'Language' }
let g:which_key_map.f = { 'name' : 'File/esearch' }
let g:which_key_map.s = { 'name' : 'Status' }
let g:which_key_map.m = { 'name' : 'Moves' }
let g:which_key_map.w = { 'name' : 'Wiki/Window' }
let g:which_key_map.r = { 'name' : 'Run/Test' }
let g:which_key_map.o = { 'name' : 'Fold' }
let g:which_key_map.e = { 'name' : 'Edit' }
let g:which_key_map.e.c = { 'name' : 'Copy file path' }
let g:which_key_map.l.d = { 'name' : 'CocList or ddgr' }
let g:which_key_map.l.e = { 'name' : 'Leetcode' }
let g:which_key_map.l.s = { 'name' : 'Doc/Worspace Symbol' }
let g:which_key_map.l.r = { 'name' : 'Rename/Reference' }
let g:which_key_map.l.t = { 'name' : 'Test' }
let g:which_key_map.m.p = [ 'normal! [`', 'Previous mark']
let g:which_key_map.m.n = [ 'normal! ]`', 'Next mark']

let g:MYVIMRC_DIR = fnamemodify(expand('$MYVIMRC'), ':h')
let $PATH .= ':' . fnamemodify(expand('$MYVIMRC'), ':h') . '/bin'

let g:indentLine_fileTypeExclude = ['vimwiki', 'markdown', 'calendar', 'json']
let g:indentLine_bufTypeExclude = ['help', 'terminal']
let g:indentLine_bufNameExclude= ['*.md']

let NERDTreeDirArrowExpandable = "+"
let NERDTreeDirArrowCollapsible = "-"
let g:polyglot_disabled = ['ansible']

let g:switch_mapping = ""
let g:switch_custom_definitions =
    \ [
    \   ['yes', 'no'],
    \   ['Yes', 'No'],
    \   ['YES', 'NO'],
    \   ['True', 'False'],
    \   ['TRUE', 'FALSE'],
    \   ['on', 'off'],
    \   ['On', 'Off'],
    \   ['ON', 'OFF'],
    \   ['[ ]', '[x]'],
    \   ['TODO', 'WORKING','DONE'],
    \ ]

let g:workspace_session_directory = $HOME . '/.vim/sessions/'
let g:any_jump_disable_default_keybindings = 1
let g:any_jump_preview_lines_count = 5
let g:any_jump_window_width_ratio  = 0.8
let g:any_jump_window_height_ratio = 0.8

silent! call which_key#register(',', "g:which_key_map")
if exists('*which_key#register')
  nnoremap <silent> <leader> :<c-u>WhichKey  ','<CR>
  vnoremap <silent> <leader> :<c-u>WhichKey  ','<CR>
  nnoremap <silent> <localleader>      :<c-u>WhichKey '<Space>'<CR>
  vnoremap <silent> <localleader>      :<c-u>WhichKey '<Space>'<CR>
endif

{% if nvim %}
" Workspace Setup
" ----------------
function! DefaultWorkspace()
   sp
   wincmd j
   resize 8
   terminal
   wincmd k
endfunction
command! -register DefaultWorkspace call DefaultWorkspace()
{% endif %}

" Wiki
" ----------------
function! Wiki()
  set autoread
  set autowrite
  VimwikiIndex
endfunction
command! -register Wiki call Wiki()

command! -bang -nargs=* NoteSearch
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case -- '.shellescape(<q-args>).' ~/notes', 1,
  \   fzf#vim#with_preview(), <bang>0)

command! Note :Files ~/notes

command! DisableTmuxKey
         \ call jobstart('set-tmux-prefix -k F1 -t 20', {
         \    'on_exit': { j,d,e ->
         \       execute('echom "enable tmux key"', '')
         \    }
         \ })

if exists('*nvim_open_win')
  let $FZF_DEFAULT_OPTS='--layout=reverse'
  let g:fzf_layout = { 'window': 'call FloatingFZF()' }

  function! FloatingFZF()
    let buf = nvim_create_buf(v:false, v:true)
    call setbufvar(buf, '&signcolumn', 'no')

    let height = &lines - 3
    let width = float2nr(&columns - (&columns * 2 / 10))
    let col = float2nr((&columns - width) / 2)

    let opts = {
          \ 'relative': 'editor',
          \ 'row': 1,
          \ 'col': col,
          \ 'width': width,
          \ 'height': height
          \ }

    call nvim_open_win(buf, v:true, opts)
  endfunction

  function! CreateFloating()
    let height = &lines - 3
    let width = float2nr(&columns - (&columns * 2 / 10))
    let col = float2nr((&columns - width) / 2)

    let opts = {
          \ 'relative': 'editor',
          \ 'row': 1,
          \ 'col': col,
          \ 'width': width,
          \ 'height': height
          \ }

    call nvim_open_win(bufnr("#"), v:true, opts)
  endfunction

  set wildoptions=pum
  set winblend=0
  set pumblend=0
endif


let g:clipboard = {
      \ 'name': 'myClipboard',
      \     'copy': {
      \         '+': 'clipboard-provider copy',
      \         '*': 'env COPY_PROVIDERS=tmux clipboard-provider copy',
      \     },
      \     'paste': {
      \         '+': 'clipboard-provider paste',
      \         '*': 'env COPY_PROVIDERS=tmux clipboard-provider paste',
      \     },
      \ }

let g:coc_global_extensions = ['coc-calc', 'coc-dictionary', 'coc-emmet', 'coc-json',
      \  'coc-post', 'coc-marketplace', 'coc-post','coc-snippets',
      \  'coc-translator','coc-tsserver','coc-tabnine','coc-rls','coc-todolist','coc-explorer',
      \  'coc-yank', 'coc-just-complete', 'coc-html', 'coc-css', 'coc-metals',
      \  'coc-go', 'coc-zi', 'coc-word', 'coc-rest', 'coc-pyright', 'coc-highlight']

let g:random_scheme=1
let g:available_colorschemes=['onedark', 'dracula', 'gruvbox-material',
      \ 'space-vim-dark', 'codedark', 'solarized8', 'iceberg',
      \ 'ayu', 'nord', 'moonfly', 'murphy', 'deep-spaciie']

let g:gruvbox_material_better_performance = 1
let g:gruvbox_material_palette = 'material'
let g:gruvbox_material_current_word = 'bold'
let g:gruvbox_material_diagnostic_line_highlight = 0
let g:gruvbox_material_diagnostic_text_highlight = 1
let g:gruvbox_material_transparent_background = 1
let g:gruvbox_material_enable_italic = 1
let g:gruvbox_material_enable_bold = 1
let g:gruvbox_material_background = 'hard'
let g:onedark_terminal_italics=1

let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

let g:lightline = {
      \ 'colorscheme': 'PaperColor',
      \ 'active': {
      \   'left': [ [ 'mode','paste' ],
      \             [ 'readonly', 'filename', 'modified'] ]
      \ },
\ }

" Yank to tmux normally
set clipboard=unnamed


" Results:  :copen, :cn, :cp
" Ex: :grep -f c++/comments %
" Ex: :grep -tc++ FIXME
if executable('ugrep')
    set grepprg=ugrep\ -RInk\ -j\ -u\ --tabs=1\ --ignore-files
    set grepformat=%f:%l:%c:%m,%f+%l+%c+%m,%-G%f\\\|%l\\\|%c\\\|%m
endif


" Yank to system clipboard with Y
nnoremap YY "+yy
nnoremap Y "+y
vnoremap Y "+y


{% if nvim %}
luafile ~/.config/nvim/config.lua
{% endif %}

if filereadable(expand("~/.vim_custom.vim")) && match(readfile(expand("~/.vim_custom.vim")),"colorscheme")==-1
  silent! colorscheme gruvbox-material
elseif !filereadable(expand("~/.vim_custom.vim"))
  silent! colorscheme gruvbox-material
endif

silent! source ~/.vim_custom.vim
silent! exec 'source' g:MYVIMRC_DIR . '/hterm-copy.vim'
