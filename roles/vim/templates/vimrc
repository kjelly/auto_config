let mapleader = ","
let g:mapleader = ","


" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set t_Co=256
    set guitablabel=%M\ %t
endif


" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry


" Return to last edit position when opening files (You want this!)
autocmd! BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif


" Do :help cope if you are unsure what cope is. It's super useful!
"
" When you search with vimgrep, display your results in cope by doing:
"   <leader>cc
"
" To go to the next search result do:
"   <leader>n
"
" To go to the previous search results do:
"   <leader>p

nnoremap <leader>gcc :botright cope<cr>
nnoremap <leader>gco ggVGy:tabnew %<cr>:set syntax=qf<cr>pgg
nnoremap <leader>gn :cn<cr>
nnoremap <leader>gp :cp<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

function! Num_Toggle()
   exe "NumbersToggle"
   exe "set number!"
endfunction

function! ToggleMouse()
    " check if mouse is enabled
    if &mouse == 'a'
        " disable mouse
        set mouse=
    else
        " enable mouse everywhere
        set mouse=a
    endif
endfunc

function! ToggleStatusLine()
    if &laststatus==0
        set laststatus=2
    else
        set laststatus=0
    endif
endfunc

function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction

if has('gui_running')
    set background=light
else
    set background=dark
endif

{% if nvim %}
{% else %}

if &shell =~# 'fish$'
    set shell=sh
endif

{% endif %}

set nocompatible              " be iMproved
filetype off                  " required before plugins


call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'vim-scripts/grep.vim'
"Plug 'ervandew/supertab'
"Plug 'DevWurm/autosession.vim'
Plug 'ntpeters/vim-better-whitespace'
Plug 'gagoar/stripwhitespaces'
Plug 'terryma/vim-expand-region'
Plug 'bling/vim-airline'
Plug 'osyo-manga/vim-over'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'easymotion/vim-easymotion'
Plug 'itchyny/calendar.vim'
Plug 'vimwiki/vimwiki'
Plug 'justinmk/vim-gtfo'
"Plug 'Yggdroot/indentLine'

" Lang
Plug 'dag/vim-fish'
{% if not programming %}"{% endif %}Plug 'fatih/vim-go'
{% if not programming %}"{% endif %}Plug 'derekwyatt/vim-scala'
{% if not programming %}"{% endif %}Plug 'pangloss/vim-javascript'
{% if not programming %}"{% endif %}Plug 'plasticboy/vim-markdown'
{% if not programming %}"{% endif %}Plug 'pearofducks/ansible-vim'
{% if not programming %}"{% endif %}Plug 'ya790206/vim-mecury-lang'
{% if not programming %}"{% endif %}Plug 'justmao945/vim-clang'
{% if not programming %}"{% endif %}Plug 'rhysd/vim-clang-format'
{% if not programming %}"{% endif %}Plug 'rust-lang/rust.vim'
{% if not programming %}"{% endif %}Plug 'racer-rust/vim-racer'
{% if not programming %}"{% endif %}Plug 'Shougo/vimproc.vim', {'do' : 'make'}
{% if not programming %}"{% endif %}Plug 'HerringtonDarkholme/yats.vim' " typescript
"Plug 'dart-lang/dart-vim-plugin'
"Plug 'keith/swift.vim'
"Plug 'gre/play2vim'


"Plug 'vim-scripts/OmniCppComplete'
"Plug 'neomake/neomake'
"Plug 'adimit/prolog.vim'
"Plug 'nathanaelkane/vim-indent-guides'
"Plug 'JesseKPhillips/d.vim'
"Plug 'HerringtonDarkholme/w3m.vim'
"Plug 'mhinz/vim-startify'
"Plug 'suan/vim-instant-markdown'

"Plug 'MattesGroeger/vim-bookmarks'
"Plug 'thinca/vim-quickrun'
"Plug 'mkitt/tabline.vim'
"Plug 'mru.vim'

{% if programming %}

"Plug 'tpope/vim-fugitive'
Plug 'lambdalisue/gina.vim'
Plug 'godlygeek/tabular'
Plug 'majutsushi/tagbar'
Plug 'mattn/emmet-vim'
Plug 'w0rp/ale'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'
Plug 'Shougo/denite.nvim'

"Plug 'Shougo/neosnippet'
"Plug 'Shougo/neosnippet-snippets'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'


"Plug 'ya790206/vim-multiterm'
"Plug 'myusuf3/numbers.vim'
Plug 'mbbill/undotree'

" Plugin to toggle, display and navigate marks
Plug 'kshenoy/vim-signature'

"Plug 'Shougo/vimproc.vim'
"Plug 'Shougo/vimshell.vim'
Plug 'Chiel92/vim-autoformat'
Plug 'rhysd/devdocs.vim'

{% if nvim %}
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'autozimu/LanguageClient-neovim', { 'do': ':UpdateRemotePlugins' }
Plug 'roxma/nvim-completion-manager'

"Plug 'zchee/deoplete-go', { 'do': 'make'}
"Plug 'zchee/deoplete-jedi'
"Plug 'mhartington/nvim-typescript'

Plug 'ternjs/tern_for_vim'
Plug 'carlitux/deoplete-ternjs'
Plug 'pangloss/vim-javascript'
Plug 'udalov/kotlin-vim'
Plug 'Shougo/neco-vim'
Plug 'Shougo/neco-syntax'

{% else %}
Plug 'Valloric/YouCompleteMe'
"Plug 'maralla/completor.vim' "for vim8
{% endif %}

{% else %}


{% endif %}
{% if nvim %}
Plug 'mhinz/neovim-remote'
"Plug 'kassio/neoterm', { 'commit': '9e33da0a' }
{% endif %}

call plug#end()

syntax enable
filetype plugin indent on     " required!


colorscheme desert


set nu
set keywordprg=sdcvh.sh
"set whichwrap+=h,l
set whichwrap+=<,>,[,],s,b
set cursorline

" Show tab line if there are more than one tab
set showtabline=1

" Set utf8 as standard encoding and en_US as the standard language
if !has('nvim')
    set encoding=utf8
endif

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Remember info about register, marks. And no highlight when started
set viminfo=<800,'10,h

" Show tab line if there are more than one tab
set showtabline=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Turn on the WiLd menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc

"Always show current position
set ruler

" Height of the command bar
set cmdheight=1

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Sets how many lines of history VIM has to remember
set history=700

" Set to auto read when a file is changed from the outside
set autoread

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

" Always show the status line
set laststatus=2

" The time in milliseconds that is waited for
" a mapped sequence to complete.
set timeoutlen=2500

set completeopt="menu,preview,noinsert,noselect"

let g:jedi#completions_command = "<C-n>"
let popup_select_first = 0
let @/ = ""
let g:vim_markdown_folding_disabled=1
let NERDTreeMapOpenInTab='<TAB>'
let g:nerdtree_tabs_focus_on_files=1

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_nr_type = 2
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_tab_nr = 2
let g:airline#extensions#tabline#tab_min_count = 2
let g:airline#extensions#tabline#exclude_preview = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#ale#enabled = 1
let g:ale_python_pylint_options="--disable=C0111,C0103,C1801,C0325"

let g:deoplete#enable_at_startup = 1

let g:vimshell_prompt_expr =
\ 'escape(fnamemodify(getcwd(), ":~").">", "\\[]()?! ")." "'
let g:vimshell_prompt_pattern = '^\%(\f\|\\.\)\+> '

let g:clang_c_completeopt = "menu,preview,noinsert,noselect"
let g:clang_cpp_completeopt = "menu,preview,noinsert,noselect"

let g:syntastic_cpp_compiler_options="-std=gnu++14"

" Easymotion
let g:EasyMotion_smartcase = 1
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion

" Let fzf ignore the files which is ignored by gitignore or hgignore
let $FZF_DEFAULT_COMMAND='ag -g ""'

let base_wiki = {}
let base_wiki.path = '~/Dropbox/vimwiki'
let base_wiki.syntax = 'markdown'
let base_wiki.ext = '.md'
let base_wiki.nested_syntaxes = {'python': 'python', 'c++': 'cpp', 'sh': 'sh', 'typescript': 'typescript', 'javascript': 'js', 'scala': 'scala', 'vim': 'vim'}
let g:vimwiki_list = [base_wiki]

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" Markdown tag bar
let g:tagbar_type_markdown = {
    \ 'ctagstype' : 'markdown',
    \ 'kinds' : [
        \ 'h:Heading_L1',
        \ 'i:Heading_L2',
        \ 'k:Heading_L3'
    \ ]
    \ }

let g:tagbar_type_vimwiki = {
    \ 'ctagstype' : 'markdown',
    \ 'kinds' : [
        \ 'h:Heading_L1',
        \ 'i:Heading_L2',
        \ 'k:Heading_L3'
    \ ]
    \ }

let g:LanguageClient_autoStart = 1
let g:LanguageClient_serverCommands = {
    \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
    \ 'python': ['pyls'],
    \ 'javascript': ['/opt/javascript-typescript-langserver/lib/language-server-stdio.js'],
    \ }

" Autocmd
autocmd! InsertLeave,WinEnter * set cursorline
autocmd! InsertEnter,WinLeave * set nocursorline

{% if nvim %}

autocmd! BufEnter * set laststatus=2
autocmd! BufEnter *fish set laststatus=0
autocmd! TermOpen *fish set laststatus=0
autocmd! TermOpen *fish set nonu

{% endif %}

autocmd! bufwritepost .vimrc source %
autocmd! bufwritepost init.vim source %
autocmd FileType c ClangFormatAutoEnable

augroup Binary
  au!
  au! BufReadPre  *.bin let &bin=1
  au! BufReadPost *.bin if &bin | %!xxd
  au! BufReadPost *.bin set ft=xxd | endif
  au! BufWritePre *.bin if &bin | %!xxd -r
  au! BufWritePre *.bin endif
  au! BufWritePost *.bin if &bin | %!xxd
  au! BufWritePost *.bin set nomod | endif
augroup END

" num toggle
command! Nu execute "call Num_Toggle()"

"Quit
command! Q execute "quit!"
command! Qa execute "quitall!"

" Diff between the curret buffer and the file.
com! Diff call s:DiffWithSaved()

{% include './templates/keybindings.vim' %}

source ~/.vim_custom.vim
