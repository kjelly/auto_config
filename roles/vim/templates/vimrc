let mapleader = ","
let g:mapleader = ","


" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set t_Co=256
    set guitablabel=%M\ %t
endif


" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry


" Return to last edit position when opening files (You want this!)
autocmd! BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif


" Do :help cope if you are unsure what cope is. It's super useful!
"
" When you search with vimgrep, display your results in cope by doing:
"   <leader>cc
"
" To go to the next search result do:
"   <leader>n
"
" To go to the previous search results do:
"   <leader>p

nnoremap <leader>gcc :botright cope<cr>
nnoremap <leader>gco ggVGy:tabnew %<cr>:set syntax=qf<cr>pgg
nnoremap <leader>gn :cn<cr>
nnoremap <leader>gp :cp<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

function! Num_Toggle()
   exe "NumbersToggle"
   exe "set number!"
endfunction

function! ToggleMouse()
    " check if mouse is enabled
    if &mouse == 'a'
        " disable mouse
        set mouse=
    else
        " enable mouse everywhere
        set mouse=a
    endif
endfunc

function! ToggleStatusLine()
    if &laststatus==0
        set laststatus=2
    else
        set laststatus=0
    endif
endfunc

function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction

if has('gui_running')
    set background=light
else
    set background=dark
endif

{% if nvim %}
{% else %}

if &shell =~# 'fish$'
    set shell=sh
endif

{% endif %}

set nocompatible              " be iMproved
filetype off                  " required before plugins


call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'vim-scripts/grep.vim'
"Plug 'ervandew/supertab'
"Plug 'DevWurm/autosession.vim'
Plug 'ntpeters/vim-better-whitespace'
Plug 'gagoar/stripwhitespaces'
Plug 'terryma/vim-expand-region'
Plug 'bling/vim-airline'
Plug 'osyo-manga/vim-over'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'easymotion/vim-easymotion'
Plug 'itchyny/calendar.vim'
Plug 'vimwiki/vimwiki'

" Lang
Plug 'dag/vim-fish'
{% if not programming %}"{% endif %}Plug 'fatih/vim-go'
{% if not programming %}"{% endif %}Plug 'derekwyatt/vim-scala'
{% if not programming %}"{% endif %}Plug 'pangloss/vim-javascript'
{% if not programming %}"{% endif %}Plug 'plasticboy/vim-markdown'
{% if not programming %}"{% endif %}Plug 'pearofducks/ansible-vim'
{% if not programming %}"{% endif %}Plug 'ya790206/vim-mecury-lang'
{% if not programming %}"{% endif %}Plug 'justmao945/vim-clang'
{% if not programming %}"{% endif %}Plug 'rhysd/vim-clang-format'
{% if not programming %}"{% endif %}Plug 'rust-lang/rust.vim'
{% if not programming %}"{% endif %}Plug 'racer-rust/vim-racer'
{% if not programming %}"{% endif %}Plug 'leafgarland/typescript-vim'
{% if not programming %}"{% endif %}Plug 'Quramy/tsuquyomi'
{% if not programming %}"{% endif %}Plug 'Shougo/vimproc.vim', {'do' : 'make'}
"Plug 'dart-lang/dart-vim-plugin'
"Plug 'keith/swift.vim'
"Plug 'gre/play2vim'


"Plug 'vim-scripts/OmniCppComplete'
"Plug 'neomake/neomake'
"Plug 'adimit/prolog.vim'
"Plug 'nathanaelkane/vim-indent-guides'
"Plug 'JesseKPhillips/d.vim'
"Plug 'HerringtonDarkholme/w3m.vim'
"Plug 'mhinz/vim-startify'
"Plug 'suan/vim-instant-markdown'

"Plug 'MattesGroeger/vim-bookmarks'
"Plug 'thinca/vim-quickrun'
"Plug 'mkitt/tabline.vim'
"Plug 'mru.vim'

{% if programming %}

Plug 'tpope/vim-fugitive'
Plug 'godlygeek/tabular'
Plug 'majutsushi/tagbar'
Plug 'mattn/emmet-vim'
Plug 'w0rp/ale'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'
Plug 'Shougo/unite.vim'

"Plug 'Shougo/neosnippet'
"Plug 'Shougo/neosnippet-snippets'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'


"Plug 'ya790206/vim-multiterm'
"Plug 'myusuf3/numbers.vim'
Plug 'mbbill/undotree'

" Plugin to toggle, display and navigate marks
Plug 'kshenoy/vim-signature'

"Plug 'Shougo/vimproc.vim'
"Plug 'Shougo/vimshell.vim'
Plug 'Chiel92/vim-autoformat'
Plug 'rhysd/devdocs.vim'


{% if nvim %}
Plug 'Shougo/deoplete.nvim'
Plug 'zchee/deoplete-go', { 'do': 'make'}
Plug 'zchee/deoplete-jedi'
Plug 'Shougo/neco-vim'
Plug 'Shougo/neco-syntax'
{% else %}
Plug 'Valloric/YouCompleteMe'
"Plug 'maralla/completor.vim' "for vim8
{% endif %}

{% else %}


{% endif %}
{% if nvim %}
Plug 'mhinz/neovim-remote'
"Plug 'kassio/neoterm', { 'commit': '9e33da0a' }
{% endif %}

call plug#end()

syntax enable
filetype plugin indent on     " required!


colorscheme desert


set nu
set keywordprg=sdcvh.sh
"set whichwrap+=h,l
set whichwrap+=<,>,[,],s,b
set cursorline

" Show tab line if there are more than one tab
set showtabline=1

" Set utf8 as standard encoding and en_US as the standard language
if !has('nvim')
    set encoding=utf8
endif

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Remember info about register, marks. And no highlight when started
set viminfo=<800,'10,h

" Show tab line if there are more than one tab
set showtabline=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Turn on the WiLd menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc

"Always show current position
set ruler

" Height of the command bar
set cmdheight=1

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Sets how many lines of history VIM has to remember
set history=700

" Set to auto read when a file is changed from the outside
set autoread

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

" Always show the status line
set laststatus=2

" The time in milliseconds that is waited for
" a mapped sequence to complete.
set timeoutlen=2500

set completeopt="menu,preview,noinsert,noselect"

let g:jedi#completions_command = "<C-n>"
let popup_select_first = 0
let @/ = ""
let g:vim_markdown_folding_disabled=1
let NERDTreeMapOpenInTab='<TAB>'
let g:nerdtree_tabs_focus_on_files=1

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_nr_type = 2
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_tab_nr = 2
let g:airline#extensions#tabline#tab_min_count = 2
let g:airline#extensions#tabline#exclude_preview = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#ale#enabled = 1
let g:ale_python_pylint_options="--disable=C0111,C0103,C1801"

let g:deoplete#enable_at_startup = 1

let g:vimshell_prompt_expr =
\ 'escape(fnamemodify(getcwd(), ":~").">", "\\[]()?! ")." "'
let g:vimshell_prompt_pattern = '^\%(\f\|\\.\)\+> '

let g:clang_c_completeopt = "menu,preview,noinsert,noselect"
let g:clang_cpp_completeopt = "menu,preview,noinsert,noselect"

let g:syntastic_cpp_compiler_options="-std=gnu++14"

" Easymotion
let g:EasyMotion_smartcase = 1
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion

" Let fzf ignore the files which is ignored by gitignore or hgignore
let $FZF_DEFAULT_COMMAND='ag -g ""'

let g:vimwiki_list = [{'path': '~/Dropbox/vimwiki/',
                     \ 'syntax': 'markdown', 'ext': '.md'}]


" Autocmd
autocmd! InsertLeave,WinEnter * set cursorline
autocmd! InsertEnter,WinLeave * set nocursorline

{% if nvim %}

autocmd! BufEnter * set laststatus=2
autocmd! BufEnter *fish set laststatus=0
autocmd! TermOpen *fish set laststatus=0
autocmd! TermOpen *fish set nonu

{% endif %}

autocmd! bufwritepost .vimrc source %
autocmd! bufwritepost init.vim source %
autocmd FileType c ClangFormatAutoEnable

augroup Binary
  au!
  au! BufReadPre  *.bin let &bin=1
  au! BufReadPost *.bin if &bin | %!xxd
  au! BufReadPost *.bin set ft=xxd | endif
  au! BufWritePre *.bin if &bin | %!xxd -r
  au! BufWritePre *.bin endif
  au! BufWritePost *.bin if &bin | %!xxd
  au! BufWritePost *.bin set nomod | endif
augroup END

" num toggle
command! Nu execute "call Num_Toggle()"

"Quit
command! Q execute "quit!"
command! Qa execute "quitall!"

" Diff between the curret buffer and the file.
com! Diff call s:DiffWithSaved()


" resize buffer
if bufwinnr(1)
  map = <C-W>+
  map - <C-W>-
  map } <C-W>>
  map { <C-W><
endif


" Use normal regex
" http://stevelosh.com/blog/2010/09/coming-home-to-vim
nnoremap / /\v
vnoremap / /\v


" Sudo to write
cnoremap w!! w !sudo tee % >/dev/null


" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>


" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>


" Fast saving
nnoremap <leader>sa :w!<cr>

" Disable highlight when <leader><cr> is pressed
nnoremap <silent> <leader><cr> :noh<cr>

" Close the current buffer
nnoremap <leader>bd :Bclose<cr>

" Close all the buffers
nnoremap <leader>ba :1,1000 bd!<cr>

" Switch CWD to the directory of the open buffer
nnoremap <leader>cd :cd %:p:h<cr>:pwd<cr>

" Smart way to move between windows
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l

nnoremap <C-n> :NERDTreeTabsToggle<CR>

" Tab mappings
nnoremap <leader>tn :tabnew %<cr>
nnoremap <leader>to :tabonly<cr>
nnoremap <leader>tc :tabclose<cr>
nnoremap <leader>tm :tabmove
nnoremap <C-t> :tabnew %<CR>
inoremap <C-t> <Esc>:tabnew %<CR>
noremap H gT
noremap L gt


" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
nnoremap <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,ss will toggle and untoggle spell checking
nnoremap <leader>spel :setlocal spell!<cr>

" Shortcuts using <leader>
nnoremap <leader>spen ]s
nnoremap <leader>spep [s


" Grep
" B for current buffer
" For example, Lines for Lines in loaded buffers.
" BLines for Lines in the current buffer
nnoremap <leader>gro :Grep<cr>
nnoremap <leader>grr :Rgrep<cr>
nnoremap <leader>ge :Egrep<cr>
nnoremap <leader>gl :Lines<cr
nnoremap <leader>gbl :BLines<cr>
nnoremap <leader>gc :Commits<cr>
nnoremap <leader>gbc :BCommits<cr>
nnoremap <leader>ga :Ag<cr>

" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSelection('gv')<CR>

" Open vimgrep and put the cursor in the right position
nnoremap <leader>gv :vimgrep // **/* <left><left><left><left><left><left><left>

" Vimgreps in the current file
nnoremap <leader><space> :vimgrep // <Home><right><right><right><right><right><right><right><right><right>


" close buffer/window
nnoremap <leader>qq :Bclose<cr>:q<cr>
nnoremap <leader>qw :q<cr>
nnoremap <leader>qb :Bclose<cr>

" State
nnoremap <leader>,n :set nu!<cr>
nnoremap <leader>,w :set wrap!<cr>
nnoremap <leader>,p :setlocal paste!<cr>
nnoremap <leader>,m :call ToggleMouse()<cr>
nnoremap <leader>,s :call ToggleStatusLine()<cr>

" Find file in NERDTree
nnoremap <leader>ff :NERDTreeMirrorOpen<cr>:NERDTreeTabsFind<cr>

" Find  line in the current buffer
nnoremap <leader>fb :BLine
" Find  lines in loaded buffers
nnoremap <leader>fl :Line

" format code
noremap <leader>fc :Autoformat<CR>

" Command
nnoremap <leader>e :Commands<cr>
nnoremap <C-e> :Commands<cr>

" Tag list
nnoremap <C-s> :Tagbar<cr>

inoremap <C-s> <Esc>:w<cr>a

" Bookmarks keybinding
"nnoremap <Leader>bt <Plug>BookmarkToggle
"nnoremap <Leader>bi <Plug>BookmarkAnnotate
"nnoremap <Leader>ba <Plug>BookmarkShowAll
"nnoremap <Leader>bj <Plug>BookmarkNext
"nnoremap <Leader>bk <Plug>BookmarkPrev
"nnoremap <Leader>bc <Plug>BookmarkClear
"nnoremap <Leader>bx <Plug>BookmarkClearAll
"nnoremap <Leader>bk <Plug>BookmarkMoveUp
"nnoremap <Leader>bj <Plug>BookmarkMoveDown

" Use down/up for <C-n>/<C-p>
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"

nnoremap <C-u> :UndotreeToggle<cr>

" Find file/buffer
nnoremap <C-p> :FZF<cr>
nnoremap <c-o> :Buffers<cr>

"nnoremap <leader>w :W3mTab google

" Resize buffer
nnoremap sa  :resize +1000<cr>
nnoremap si  :resize -1000<cr>
nnoremap sm  <c-w><c-=>

" Find window
nnoremap <a-/>  :Windows<cr>
inoremap     <a-/>  :Windows<cr>

" Auto complete for all word
inoremap     <c-a>  <c-x><c-n>

" Easymotion
nmap S <Plug>(easymotion-s)
nmap f <Plug>(easymotion-overwin-w)
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><leader>l <Plug>(easymotion-lineforward)

{% if nvim %}

" Alt-num to switch tab
noremap <A-0> 0gt
noremap <A-1> 1gt
noremap <A-2> 2gt
noremap <A-3> 3gt
noremap <A-4> 4gt
noremap <A-5> 5gt
noremap <A-6> 6gt
noremap <A-7> 7gt
noremap <A-8> 8gt
noremap <A-9> 9gt
noremap <A-0> 0gt

{% else %}

" Alt-num to switch tab
execute "set <M-0>=\e0"
noremap <M-0> 0gt
execute "set <M-1>=\e1"
noremap <M-1> 1gt
execute "set <M-2>=\e2"
noremap <M-2> 2gt
execute "set <M-3>=\e3"
noremap <M-3> 3gt
execute "set <M-4>=\e4"
noremap <M-4> 4gt
execute "set <M-5>=\e5"
noremap <M-5> 5gt
execute "set <M-6>=\e6"
noremap <M-6> 6gt
execute "set <M-7>=\e7"
noremap <M-7> 7gt
execute "set <M-8>=\e8"
noremap <M-8> 8gt
execute "set <M-9>=\e9"
noremap <M-9> 9gt

{% endif %}

noremap <Esc>h <Nop>
noremap <Esc>l <Nop>

" Delete one word
inoremap <C-e> <Esc>dwi

" Forware/backware word
inoremap <C-f> <Esc>w i
inoremap <C-b> <Esc>bi

" Paste text
inoremap <C-v> <Esc>pi

" insert new after the line
inoremap <C-o> <Esc>:Buffers<cr>

" Paste text from clipboard
vnoremap <c-c> "+y
vnoremap <Return> "+y

"Quickly move current line
nnoremap [e  :<c-u>execute 'move -1-'. v:count1<cr>
nnoremap ]e  :<c-u>execute 'move +'. v:count1<cr>

inoremap <C-d>     <Plug>(neosnippet_expand_or_jump)

" keybinding about lang
au FileType go nnoremap <leader>le :GoRun<cr>
au FileType go nnoremap <leader>lb :GoBuild<cr>
au FileType go nnoremap <leader>lt :GoTest<cr>
au FileType go nnoremap <leader>lc <Plug>(go-coverage)
au FileType go nnoremap <leader>lde :<C-u>call go#def#Jump('')<CR>
au FileType go nnoremap <leader>lds :<C-u>call go#def#Jump("split")<CR>
au FileType go nnoremap <leader>ldv :<C-u>call go#def#Jump("vsplit")<CR>
au FileType go nnoremap <leader>ldt :<C-u>call go#def#Jump("tab")<CR>
au FileType go nnoremap <leader>lk :GoDoc<cr>
au FileType go nnoremap <leader>ls :GoImplements<cr>
au FileType go nnoremap <leader>li :GoInfo<cr>
au FileType go nnoremap <leader>lrn :GoRename<cr>
au FileType go nnoremap <leader>lrf :GoReferrers<cr>
au FileType go nnoremap <leader>lce :GoCallees<cr>
au FileType go nnoremap <leader>lcr :GoCallers<cr>

let g:jedi#goto_command = "<leader>lde"
let g:jedi#goto_assignments_command = "<leader>lga"
let g:jedi#goto_definitions_command = "<leader>lde"
let g:jedi#documentation_command = "<leader>k"
let g:jedi#usages_command = "<leader>li"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>lrn"

let g:racer_cmd = "{{ HOME_PATH }}/.cargo/bin/racer"
let $RUST_SRC_PATH="{{ HOME_PATH }}/rust-src/src"


{% if nvim %}

" Disable mouse
set mouse=""

" open new terminal in new tab/buffer.
map <leader>tt :tabnew %<cr>:terminal<cr>
map <leader>tb :split<cr><c-w>j:terminal<cr>

" Tab switch
tnoremap <A-1> <C-\><C-n>1gti
tnoremap <A-2> <C-\><C-n>2gti
tnoremap <A-3> <C-\><C-n>3gti
tnoremap <A-4> <C-\><C-n>4gti
tnoremap <A-5> <C-\><C-n>5gti
tnoremap <A-6> <C-\><C-n>6gti
tnoremap <A-7> <C-\><C-n>7gti
tnoremap <A-8> <C-\><C-n>8gti
tnoremap <A-9> <C-\><C-n>9gti
tnoremap <A-0> <C-\><C-n>0gti

" Tab switch
inoremap <A-1> <Esc>1gti
inoremap <A-2> <Esc>2gti
inoremap <A-3> <Esc>3gti
inoremap <A-4> <Esc>4gti
inoremap <A-5> <Esc>5gti
inoremap <A-6> <Esc>6gti
inoremap <A-7> <Esc>7gti
inoremap <A-8> <Esc>8gti
inoremap <A-9> <Esc>9gti
inoremap <A-0> <Esc>0gti

tnoremap <Insert> <C-\><C-n>
"tnoremap <C-[> <C-\><C-n> Don't enable this. Esc is useful when vim in vim
tnoremap <A-a> <C-\><C-n>
inoremap <A-a> <Esc>
nnoremap <A-a> i
vnoremap <A-a> <Esc>

tnoremap å <C-\><C-n>
inoremap å <Esc>
nnoremap å i
vnoremap å <Esc>

tnoremap <C-q> <C-\><C-n>
inoremap <C-q> <Esc>
nnoremap <C-q> i
vnoremap <C-q> <Esc>

tnoremap <C-]> <C-\><C-n>
inoremap <C-]> <Esc>
nnoremap <C-]> i
vnoremap <C-]> <Esc>

" Buffer navigation
tnoremap <A-h> <C-\><C-n><C-w>h
tnoremap <A-j> <C-\><C-n><C-w>j
tnoremap <A-k> <C-\><C-n><C-w>k
tnoremap <A-l> <C-\><C-n><C-w>l
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l
inoremap <A-h> <Esc><C-w>h
inoremap <A-j> <Esc><C-w>j
inoremap <A-k> <Esc><C-w>k
inoremap <A-l> <Esc><C-w>l

tnoremap ˙ <C-\><C-n><C-w>h
tnoremap ∆ <C-\><C-n><C-w>j
tnoremap ˚ <C-\><C-n><C-w>k
tnoremap ¬ <C-\><C-n><C-w>l
nnoremap ˙ <C-w>h
nnoremap ∆ <C-w>j
nnoremap ˚ <C-w>k
nnoremap ¬ <C-w>l
inoremap ˙ <Esc><C-w>h
inoremap ∆ <Esc><C-w>j
inoremap ˚ <Esc><C-w>k
inoremap ¬ <Esc><C-w>l

" Find files/buffers
nnoremap <A-o> :Buffers<cr>
tnoremap <A-o> <C-\><C-n>Buffers<cr>a

" Quickfix
nnoremap <A-p> :lprevious<cr>
inoremap <A-p> <Esc>:lprevious<cr>
nnoremap <A-n> :lnext<cr>
inoremap <A-n> <Esc>:lnextnext<cr>
nnoremap <A-s> :lopen<cr>
inoremap <A-s> <Esc>:lopen<cr>

" Resize buffer
nnoremap <silent> <A-q>  :resize +1000<cr>
nnoremap <silent> <A-w>  <c-w><c-=>
nnoremap <silent> <A-e>  :resize -1000<cr>
nnoremap <silent> <A-r>  :vertical resize +1000<cr>
nnoremap <silent> <A-t>  :vertical resize -1000<cr>
inoremap <silent> <A-q>  <Esc>:resize +1000<cr>a
inoremap <silent> <A-w>  <Esc><c-w><c-=>i
inoremap <silent> <A-e>  <Esc>:resize -1000<cr>a
inoremap <silent> <A-r>  <Esc>:vertical resize +1000<cr>a
inoremap <silent> <A-t>  <Esc>:vertical resize -1000<cr>a
tnoremap <silent> <A-q>  <C-\><C-n>:resize +1000<cr>a
tnoremap <silent> <A-w>  <C-\><C-n><c-w><c-=>i
tnoremap <silent> <A-e>  <C-\><C-n>:resize -1000<cr>a
tnoremap <silent> <A-r>  <C-\><C-n>:vertical resize +1000<cr>a
tnoremap <silent> <A-t>  <C-\><C-n>:vertical resize -1000<cr>a

nnoremap <silent> œ :resize +1000<cr>
nnoremap <silent> ∑ <c-w><c-=>
nnoremap <silent> ´ :resize -1000<cr>
nnoremap <silent> ® :vertical resize +1000<cr>
nnoremap <silent> † :vertical resize -1000<cr>
inoremap <silent> œ <Esc>:resize +1000<cr>a
inoremap <silent> ∑ <Esc><c-w><c-=>i
inoremap <silent> ´ <Esc>:resize -1000<cr>a
inoremap <silent> ® <Esc>:vertical resize +1000<cr>a
inoremap <silent> † <Esc>:vertical resize -1000<cr>a
tnoremap <silent> œ <C-\><C-n>:resize +1000<cr>a
tnoremap <silent> ∑ <C-\><C-n><c-w><c-=>i
tnoremap <silent> ´ <C-\><C-n>:resize -1000<cr>a
tnoremap <silent> ® <C-\><C-n>:vertical resize +1000<cr>a
tnoremap <silent> † <C-\><C-n>:vertical resize -1000<cr>a

" Paste text
tnoremap <A-v> <C-\><C-n>pi
inoremap <A-v> <Esc>pi

inoremap <A-r>r <Esc>:C ! <cr>a

inoremap <A-r>1 <Esc>:C g1<cr>a
inoremap <A-r>2 <Esc>:C g2<cr>a
inoremap <A-r>3 <Esc>:C g3<cr>a
inoremap <A-r>4 <Esc>:C g4<cr>a
inoremap <A-r>5 <Esc>:C g5<cr>a
inoremap <A-r>6 <Esc>:C g6<cr>a
inoremap <A-r>7 <Esc>:C g7<cr>a
inoremap <A-r>8 <Esc>:C g8<cr>a
inoremap <A-r>9 <Esc>:C g9<cr>a
inoremap <A-r>0 <Esc>:C g0<cr>a

nnoremap <A-r>r <Esc>:C !<cr>
nnoremap <A-r>1 <Esc>:C g1<cr>
nnoremap <A-r>2 <Esc>:C g2<cr>
nnoremap <A-r>3 <Esc>:C g3<cr>
nnoremap <A-r>4 <Esc>:C g4<cr>
nnoremap <A-r>5 <Esc>:C g5<cr>
nnoremap <A-r>6 <Esc>:C g6<cr>
nnoremap <A-r>7 <Esc>:C g7<cr>
nnoremap <A-r>8 <Esc>:C g8<cr>
nnoremap <A-r>9 <Esc>:C g9<cr>
nnoremap <A-r>0 <Esc>:C g0<cr>

inoremap <A-o> <Esc>:Buffers<cr>

nnoremap <A-d> :DevDocsUnderCursor<cr>
nnoremap ∂ :DevDocsUnderCursor<cr>

" Tab navigate
nnoremap <A-,> gT
nnoremap <A-.> gt
inoremap <A-,> <ESC>gTi
inoremap <A-.> <ESC>gti
tnoremap <A-,> <C-\><C-n>gTi
tnoremap <A-.> <C-\><C-n>gti


nnoremap <A-f> :Ag<cr>
nnoremap ƒ :Ag<cr>
inoremap <Esc><A-f> :Ag<cr>
inoremap ƒ :Ag<cr>
{% endif %}

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

source ~/.vim_custom.vim
