let mapleader = ","
let maplocalleader = "\<space>"

" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set t_Co=256
    set t_ut=
    set guitablabel=%M\ %t
endif

"https://github.com/tmux/tmux/issues/1246
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif


" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry


" Return to last edit position when opening files (You want this!)
autocmd! BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
command! SearchPanel :lua require('spectre').open()<CR>
command! Br :FloatermNew --autoclose=1 br<cr>
command! FormatJson :%!format_json.py

function! <SID>BufcloseCloseIt()
  let l:currentBufNum = bufnr("%")
  let l:alternateBufNum = bufnr("#")

  if buflisted(l:alternateBufNum)
    buffer #
  else
    bnext
  endif

  if bufnr("%") == l:currentBufNum
    new
  endif

  if buflisted(l:currentBufNum)
    execute("bdelete! ".l:currentBufNum)
  endif
endfunction

function! Num_Toggle()
  exe "NumbersToggle"
  exe "set number!"
endfunction

function! ToggleMouse()
    " check if mouse is enabled
    if &mouse == 'a'
        " disable mouse
        set mouse=
    else
        " enable mouse everywhere
        set mouse=a
    endif
endfunc

function! ToggleStatusLine()
    if &laststatus==0
        set laststatus=2
    else
        set laststatus=0
    endif
endfunc

function! ToggleForCopy()
    if &nu==0
        set nu!
        set signcolumn=yes
        call ToggleIndentLine()
    else
        set nu!
        set signcolumn=no
        call ToggleIndentLine()
    endif
endfunc

function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction

function! Ssh(cmd, hosts)
  for i in a:hosts
    execute "enew"
    execute "read !ssh " . i . ' ' . a:cmd
    execute 'file ssh-' . i . '-' . a:cmd
  endfor
endfunction

function RunShellAndShow(cmd)
  execute "FloatermToggle!"
  execute "FloatermHide!"
  execute "FloatermSend! " . a:cmd
  execute "FloatermShow!"
  execute "startinsert"
endfunction

let g:termOpen=0
function! TermToggle()
  let l:buffers = floaterm#buflist#gather()
  if len(l:buffers) == 0
    execute "FloatermNew"
    let g:termOpen = 1
  elseif g:termOpen == 0
    execute "FloatermShow"
    let g:termOpen = 1
  else
    execute "FloatermHide!"
    let g:termOpen = 0
  endif
endfunction

function! FindFileInTree()
  if exists(":NvimTreeFindFile")
    execute "NvimTreeFindFile"
  elseif exists(":NERDTreeTabsFind")
    execute "NERDTreeMirrorOpen"
    execute "NERDTreeTabsFind"
  endif
endfunction

if has('gui_running')
    set background=light
else
    set background=dark
endif

if executable("fish") == 1
  set shell=fish
elseif executable("zsh") == 1
  set shell=zsh
endif

imap <C-f> <Plug>(coc-snippets-expand)
imap <C-f> <Plug>(coc-snippets-expand-jump)
let g:coc_snippet_next = '<c-f>'
let g:coc_snippet_prev = '<c-b>'

let g:nvim_tree_highlight_opened_files=1
let g:nvim_tree_lsp_diagnostic=1
let g:nvim_tree_disable_window_picker=0
let g:nvim_tree_special_files = { 'README.md': 1, 'Makefile': 1, 'MAKEFILE': 1 }
let g:nvim_tree_icons = {
    \ 'default': 'Óòí',
    \ 'symlink': 'ÔíÅ',
    \ 'git': {
    \   'unstaged': "‚ùå",
    \   'staged': "‚úÖ",
    \   'unmerged': "Óúß",
    \   'renamed': "„à¥",
    \   'untracked': "üö©",
    \   'deleted': "Ôëò",
    \   'ignored': "‚óå"
    \   },
    \ 'folder': {
    \   'arrow_open': "Ôëº",
    \   'arrow_closed': "Ôë†",
    \   'default': "Óóø",
    \   'open': "Óóæ",
    \   'empty': "ÔÑî",
    \   'empty_open': "ÔÑï",
    \   'symlink': "ÔíÇ",
    \   'symlink_open': "Óóæ",
    \   },
    \   'lsp': {
    \     'hint': "ÔÅ™",
    \     'info': "ÔÅö",
    \     'warning': "ÔÅ±",
    \     'error': "ÔÅó",
    \   }
    \ }
let g:nvim_tree_symlink_arrow = 'ÔÅ°'

let g:indent_blankline_buftype_exclude = ['terminal']
let g:indent_blankline_filetype_exclude=['help', 'NvimTree', 'vista', 'floaterm']
let g:indent_blankline_char_list = ['|', '¬¶', '‚îÜ', '‚îä']
let g:indent_blankline_use_treesitter = v:true
let g:blameLineUseVirtualText = 1

let g:signify_sign_delete            = '_'
let g:signify_sign_delete_first_line = '_'
let g:signify_sign_change            = '!'
let g:signify_sign_change_delete     = g:signify_sign_change . g:signify_sign_delete_first_line

let g:vista_icon_indent = ["Ô¨å", "Ô≤ñ"]
let g:vista_default_executive = 'ctags'
let g:vista_executive_for = {
  \ 'python': 'coc',
  \ 'dart': 'coc',
  \ 'js': 'coc',
  \ 'ts': 'coc',
  \ }
let g:calvera_italic_comments = 1
let g:calvera_italic_keywords = 1
let g:calvera_italic_functions = 1
let g:calvera_contrast = 1

let g:loaded_python_provider = 0
let g:loaded_perl_provider = 0
let g:loaded_ruby_provider = 0


set nocompatible              " be improved
filetype off                  " required before plugins

if exists(':TSUpdate')
  set foldmethod=expr
  set foldexpr=nvim_treesitter#foldexpr()
endif

{% if nvim %}
silent! call plug#begin('~/.config/nvim/plugged')
{% else %}
silent! call plug#begin('~/.vim/plugged')
{% endif %}
if has('nvim-0.5')
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate all'}
  Plug 'https://github.com/p00f/nvim-ts-rainbow'
  Plug 'mizlan/iswap.nvim'
  Plug 'nvim-treesitter/nvim-treesitter-textobjects'
  Plug 'https://github.com/theHamsta/nvim-treesitter-pairs'
  Plug 'romgrk/nvim-treesitter-context'
  Plug 'nvim-treesitter/playground'
  Plug 'nvim-treesitter/nvim-treesitter-refactor'
  Plug 'https://github.com/David-Kunz/treesitter-unit'
  Plug 'spywhere/detect-language.nvim'

  " Seamlessly jump between matched instances.
  Plug 'kevinhwang91/nvim-hlslens', {'branch': 'main'}
  Plug 'mfussenegger/nvim-dap'
  Plug 'mfussenegger/nvim-dap-python'
  Plug 'rcarriga/nvim-dap-ui'
  " status line
  Plug 'https://github.com/nvim-lualine/lualine.nvim'

  " A search panel for neovim.
  Plug 'nvim-lua/popup.nvim'
  Plug 'nvim-lua/plenary.nvim'
  Plug 'windwp/nvim-spectre'

  " Jump to any definition and
  " references IDE madness without overhead
  Plug 'pechorin/any-jump.nvim'
  Plug 'akinsho/nvim-bufferline.lua'

  " Easymotion-like
  Plug 'https://github.com/phaazon/hop.nvim'
  Plug 'windwp/nvim-autopairs'
  Plug 'monaqa/dial.nvim'
  Plug 'kyazdani42/nvim-tree.lua'

  " Indent guides for Neovim
  Plug 'https://github.com/lukas-reineke/indent-blankline.nvim', {'branch': 'master'}
  Plug 'tveskag/nvim-blame-line'

  " Comment
  Plug 'b3nj5m1n/kommentary'
  Plug 'https://github.com/folke/which-key.nvim'
else
  Plug 'itchyny/lightline.vim'
  Plug 'kjelly/auto-pairs'
  Plug 'tpope/vim-speeddating'
  Plug 'justinmk/vim-sneak'
  Plug 'scrooloose/nerdtree', { 'on':  ['NERDTreeToggle', 'NERDTreeTabsToggle', 'NERDTreeMirrorOpen', 'NERDTreeTabsFind'] }
  Plug 'jistr/vim-nerdtree-tabs', { 'on':  ['NERDTreeToggle', 'NERDTreeTabsToggle', 'NERDTreeMirrorOpen', 'NERDTreeTabsFind'] }
  " Show register content when pressing " or <c-r>
  Plug 'junegunn/vim-peekaboo'
  Plug 'Yggdroot/indentLine'
" use <c-/> for toggling comment
  Plug 'tomtom/tcomment_vim'
  Plug 'google/vim-searchindex'
  Plug 'liuchengxu/vim-which-key'
endif

Plug 'jdhao/better-escape.vim'
Plug 'neovim/nvim-lspconfig'
Plug 'https://github.com/alex-popov-tech/timer.nvim'
Plug 'https://github.com/lewis6991/impatient.nvim'
Plug 'https://github.com/dstein64/vim-startuptime'
Plug 'kyazdani42/nvim-web-devicons'
Plug 'gelguy/wilder.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'folke/persistence.nvim'

if empty($SSH_CLIENT)
  Plug 'blueyed/vim-diminactive' " use different background color for inactive window
else
endif

" Emoji"
Plug 'yazgoo/unicodemoji'

" Git
Plug 'https://github.com/lambdalisue/gina.vim'

" DB
Plug 'tpope/vim-dadbod', { 'on': ['DB']}
Plug 'kristijanhusak/vim-dadbod-ui', { 'on': ['DB']}

Plug 'https://github.com/kjelly/fzf-floaterm'
Plug 'voldikss/vim-floaterm'

" Switch true/flase
Plug 'AndrewRadev/switch.vim'

" An always-on highlight for a unique character in every word on a line
" to help you use f, F and family.
Plug 'unblevable/quick-scope'
Plug 'itchyny/calendar.vim', { 'on': 'Calendar'}
Plug 'vimwiki/vimwiki', { 'on': 'VimwikiIndex' }
Plug 'janko-m/vim-test', { 'on': ['TestFile','TestLast','TestNearest','TestSuite','TestVisit']}

" git grep
Plug 'mhinz/vim-grepper', { 'on': ['Grepper', '<plug>(GrepperOperator)'] }
Plug 'simeji/winresizer'
Plug 't9md/vim-choosewin'
Plug 'john-nanney/pushd.vim'
Plug 'metakirby5/codi.vim'
Plug 'chrisbra/Colorizer', { 'on': ['ColorToggle'] }
" Plug 'Shougo/vimproc.vim', {'do' : 'make'}

" set filetype=rest
" <c-j> for send request
" http://localhost:9200
" POST /testindex/testtype
" {
"   "key": "new key",
"   "value": "new value"|
" }
Plug 'diepm/vim-rest-console'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
"Plug 'ctrlpvim/ctrlp.vim'

" For sudo
" :w suda://%
Plug 'lambdalisue/suda.vim'

" sudo pip3 install keyring browser-cookie3
Plug 'ianding1/leetcode.vim'

" colorscheme
Plug 'liuchengxu/space-vim-dark' " Good
Plug 'tyrannicaltoucan/vim-deep-space'
Plug 'bluz71/vim-moonfly-colors'
Plug 'sainnhe/gruvbox-material'
Plug 'ayu-theme/ayu-vim'
Plug 'cocopon/iceberg.vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'gruvbox-community/gruvbox'
Plug 'romgrk/doom-one.vim'
{% if nvim %}
Plug 'folke/tokyonight.nvim'
Plug 'marko-cerovac/material.nvim'
Plug 'briones-gabriel/darcula-solid.nvim'
Plug 'rktjmp/lush.nvim'
Plug 'eddyekofo94/gruvbox-flat.nvim'
Plug 'https://github.com/Mofiqul/dracula.nvim'
Plug 'yashguptaz/calvera-dark.nvim'
Plug 'projekt0n/github-nvim-theme'
Plug 'yong1le/darkplus.nvim'
Plug 'ray-x/aurora'
Plug 'EdenEast/nightfox.nvim'
Plug 'https://github.com/Pocco81/Catppuccino.nvim'
Plug 'frenzyexists/aquarium-vim', { 'branch': 'vimscript-version' }
Plug 'https://github.com/sainnhe/edge'
Plug 'yashguptaz/calvera-dark.nvim'
Plug 'https://github.com/sainnhe/everforest'
Plug 'https://github.com/navarasu/onedark.nvim'
Plug 'lourenci/github-colors'
Plug 'shaunsingh/moonlight.nvim'
{% else %}
Plug 'dracula/vim', { 'as': 'dracula' }

{% endif %}

if executable("fcitx") == 1
  Plug 'vim-scripts/fcitx.vim'
endif

{% if programming %}

Plug 'https://github.com/liuchengxu/vista.vim', { 'on': ['Vista', 'Vista!!']}
Plug 'tpope/vim-fugitive'
Plug 'cohama/agit.vim', { 'on':  ['Agit', 'AgitFile'] }

Plug 'mbbill/undotree', { 'on': ['UndotreeToggle']}

" Bookmarks and marks
Plug 'https://github.com/chentau/marks.nvim'

{% if nvim %}

if has('python3')
  Plug 'vim-vdebug/vdebug', { 'on': 'VdebugStart'}
endif

Plug 'honza/vim-snippets'

if executable('node')
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'antoinemadec/coc-fzf', {'branch': 'release'}
  " Highlight symbol under cursor on CursorHold
  autocmd CursorHold * silent call CocActionAsync('highlight')
else
  " emmet `<c-y>,` for expand `div>a` to `<div><a></a></div>
  Plug 'mattn/emmet-vim'
endif

" project-wide async search and replace
" `<leader>ff` for esearch.
Plug 'eugen0329/vim-esearch'


{% else %}

{% endif %}

{% else %}

{% endif %}
{% if nvim %}
Plug 'mhinz/neovim-remote'

{% endif %}


call plug#end()

silent! lua require('impatient')
silent! call denite#custom#map('insert', '<C-j>', '<denite:move_to_next_line>', 'noremap')
silent! call denite#custom#map('insert', '<C-k>', '<denite:move_to_previous_line>', 'noremap')

syntax enable
filetype plugin indent on     " required!


set nu
set keywordprg=sdcvh.sh
"set whichwrap+=h,l
set whichwrap+=<,>,[,],s,b
set cursorline
set showcmd
set mouse=

" Show tab line if there are more than one tab
set showtabline=1

" Set utf8 as standard encoding and en_US as the standard language
if !has('nvim')
    set encoding=utf8
endif

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Remember info about register, marks. And no highlight when started
set viminfo=<800,'10,h

" Show tab line if there are more than one tab
set showtabline=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set dir=~/.vim_cache/swapfiles
set backup
set backupdir=~/.vim_cache
set undodir=~/.vim_cache
set undofile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Turn on the WiLd menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc

"Always show current position
set ruler

" Height of the command bar
set cmdheight=1

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set tm=500

" Sets how many lines of history VIM has to remember
set history=700

" Set to auto read when a file is changed from the outside
set autoread

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=2
set tabstop=2

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

" Always show the status line
set laststatus=2

" The time in milliseconds that is waited for
" a mapped sequence to complete.
set timeoutlen=500
set updatetime=300

set completeopt+=noinsert
set completeopt-=preview
set listchars=tab:>-,trail:~,extends:>,precedes:<
set list
set foldlevel=9
set sessionoptions=buffers,curdir,tabpages,winsize,globals
" suppress the annoying 'match x of y', 'The only match' and 'Pattern not
" found' messages
" or don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes
set encoding=UTF-8
set noshowmode
{% if nvim %}
set inccommand=nosplit
set winblend=8
set pumblend=8
{% endif %}

let @/ = ""
let anyfold_activate=1
let anyfold_fold_comments=1
let NERDTreeMapOpenInTab='<TAB>'
let g:nerdtree_tabs_focus_on_files=1
let g:ale_python_pylint_options="--disable=C0111,C0103,C1801,C0325"

"let g:vimshell_prompt_expr =
"\ 'escape(fnamemodify(getcwd(), ":~").">", "\\[]()?! ")." "'
"let g:vimshell_prompt_pattern = '^\%(\f\|\\.\)\+> '

" Let fzf ignore the files which is ignored by gitignore or hgignore
if executable("ag") == 1
  let $FZF_DEFAULT_COMMAND='ag -g ""'
endif
if executable('rg')
    let &grepprg = "rg --vimgrep"
endif

let g:bookmark_no_default_key_mappings = 1

let g:go_list_type = "quickfix"

{% if python3_exec is defined and python3_exec.exist %}
let g:python3_host_prog='{{ python3_exec.path }}'
{% endif %}

let $BROWSER='w3m'
let $IN_VIM=1
let $HTERM_TTY=substitute(system("tty < /proc/" . getpid() . "/fd/0"), '\n$', '', '')

" vim-rest-console
let g:vrc_keepalt = 1
let g:vrc_curl_opts = {
  \ '-sS': '',
  \ '--connect-timeout': 10,
  \}

let g:NERDTreeWinSize=20

{% if nvim %}let test#strategy = "neovim" {% endif %}

let g:leetcode_solution_filetype='python3'
let g:floaterm_wintype='vsplit'
let g:floaterm_position='right'
let g:floaterm_width=0.5
let g:floaterm_height=1.0
let g:floaterm_autoinsert = v:false


" Autocmd

{% if nvim %}
function! WinLeaveAction()
  if &filetype=='floaterm' | :FloatermHide<cr>
  elseif &filetype=='fzf' | wincmd q
  endif
endfunction

{% endif %}

function AutoDec1()
  execute "Dec1"
  set filetype=markdown
endfunction
" autocmd! BufReadPost,FileReadPost *.smd call AutoDec1()
" autocmd! BufWritePre,FileWritePre *.smd Enc1
" autocmd! BufWritePost,FileWritePost *.smd call AutoDec1()
autocmd! BufWritePre * %s/\s\+$//e
autocmd! TermOpen * setlocal nonu norelativenumber

autocmd! CursorHold * checktime | silent let b:atime=strftime("%T")
autocmd! BufCreate * silent let b:atime=strftime("%T")
autocmd! SessionLoadPost * silent bufdo let b:atime=strftime("%T")

if exists(":NvimTreeFind")
  autocmd DirChanged * NerdTreeFind
endif

augroup Binary
  au!
  au! BufReadPre  *.bin let &bin=1
  au! BufReadPost *.bin if &bin | %!xxd
  au! BufReadPost *.bin set ft=xxd | endif
  au! BufWritePre *.bin if &bin | %!xxd -r
  au! BufWritePre *.bin endif
  au! BufWritePost *.bin if &bin | %!xxd
  au! BufWritePost *.bin set nomod | endif
augroup END

command! ClearBuffer bufdo if ((expand("%p") == '' || !filereadable(expand("%p"))) && &modified == 0) | bdelete | endif

" num toggle
command! Nu execute "call Num_Toggle()"

"Quit
command! Q execute "quit!"
command! Qa execute "quitall!"

" Sudo to write
command! W :w !sudo tee % >/dev/null

command! Cd1 :cd ..
command! Cd2 :cd ../..
command! Cd3 :cd ../../..
command! E :Explore

" Diff between the curret buffer and the file.
com! Diff call s:DiffWithSaved()

function! OpenChangedFiles()
  only " Close all windows, unless they're modified
  let status = system('git status -s | grep "^ \?\(M\|A\)" | cut -d " " -f 3')
  let filenames = split(status, "\n")

  if len(filenames) < 1
    let status = system('git show --pretty="format:" --name-only')
    let filenames = split(status, "\n")
  endif

  exec "edit " . filenames[0]

  for filename in filenames[1:]
    if len(filenames) > 4
      exec "tabedit " . filename
    else
      exec "sp " . filename
    endif
  endfor
endfunction
command! OpenChangedFiles :call OpenChangedFiles()

command! Enc execute '%!openssl enc -aes-256-cbc -a -salt -pass file:$HOME/.ssh/passwd.txt'
command! Enc1 execute '%!openssl enc -pbkdf2 -a -salt -pass file:$HOME/.ssh/passwd.txt'
command! Dec execute '%!openssl enc -d -aes-256-cbc -a -salt -pass file:$HOME/.ssh/passwd.txt'
command! Dec1 execute '%!openssl enc -d -pbkdf2 -a -salt -pass file:$HOME/.ssh/passwd.txt'

command! Vifm FloatermNew vifm -c only
command! NNN FloatermNew nnn
command! FFF FloatermNew fff

{% include './templates/keybindings.vim' %}
{% include './templates/keybindings_leader.vim' %}

let g:MYVIMRC_DIR = fnamemodify(expand('$MYVIMRC'), ':h')
let $PATH .= ':' . fnamemodify(expand('$MYVIMRC'), ':h') . '/bin'

let NERDTreeDirArrowExpandable = "+"
let NERDTreeDirArrowCollapsible = "-"

let g:switch_mapping = ""
let g:switch_custom_definitions =
    \ [
    \   ['yes', 'no'],
    \   ['Yes', 'No'],
    \   ['YES', 'NO'],
    \   ['True', 'False'],
    \   ['TRUE', 'FALSE'],
    \   ['on', 'off'],
    \   ['On', 'Off'],
    \   ['ON', 'OFF'],
    \   ['[ ]', '[x]'],
    \   ['TODO', 'WORKING','DONE'],
    \ ]

let g:workspace_session_directory = $HOME . '/.vim/sessions/'
let g:workspace_autosave_always = 1
let g:workspace_session_disable_on_args = 1
let g:any_jump_disable_default_keybindings = 1
let g:any_jump_preview_lines_count = 5
let g:any_jump_window_width_ratio  = 0.8
let g:any_jump_window_height_ratio = 0.8

" Wiki
" ----------------
function! Wiki()
  set autoread
  set autowrite
  VimwikiIndex
endfunction
command! -register Wiki call Wiki()

command! -bang -nargs=* NoteSearch
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case -- '.shellescape(<q-args>).' ~/notes', 1,
  \   fzf#vim#with_preview(), <bang>0)

command! Note :Files ~/notes

command! DisableTmuxKey
         \ call jobstart('set-tmux-prefix -k F1 -t 20', {
         \    'on_exit': { j,d,e ->
         \       execute('echom "enable tmux key"', '')
         \    }
         \ })

if !empty($TMUX)
  let g:clipboard = {
        \ 'name': 'myClipboard',
        \     'copy': {
        \         '+': 'clipboard-provider copy',
        \         '*': 'env COPY_PROVIDERS=tmux clipboard-provider copy',
        \     },
        \     'paste': {
        \         '+': 'clipboard-provider paste',
        \         '*': 'env COPY_PROVIDERS=tmux clipboard-provider paste',
        \     },
        \ }
endif

let g:coc_global_extensions = ['coc-calc', 'coc-dictionary', 'coc-emmet', 'coc-json',
      \  'coc-post', 'coc-marketplace', 'coc-post','coc-snippets',
      \  'coc-translator','coc-tsserver','coc-tabnine','coc-rls','coc-todolist','coc-explorer',
      \  'coc-yank', 'coc-just-complete', 'coc-html', 'coc-css', 'coc-metals', 'coc-lua',
      \  'coc-go', 'coc-zi', 'coc-word', 'coc-rest', 'coc-pyright', 'coc-highlight', 'coc-git', 'coc-sh',
      \  'coc-floaterm', 'coc-lists', 'coc-flutter']

let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
let g:better_escape_shortcut = 'jk'
let g:fzf_colors = {'gutter': ['bg', 'Normal']}
let g:fzf_floaterm_newentries = {
  \ '+root' : {
    \ 'title': 'Root Shell',
    \ 'cmd': 'sudo sh' },
  \ }

" hightlight
highlight NvimTreeFolderIcon guibg=blue
highlight FloatermNC guibg=#444444

" blueyed/vim-diminactive
highlight ColorColumn guibg=#444444

" Yank to tmux normally
set clipboard=unnamed

" wilder
try
  call wilder#enable_cmdline_enter()
  set wildcharm=<Tab>
  cmap <expr> <Tab> wilder#in_context() ? wilder#next() : "\<Tab>"
  cmap <expr> <S-Tab> wilder#in_context() ? wilder#previous() : "\<S-Tab>"

  " only / and ? are enabled by default
  call wilder#set_option('modes', ['/', '?', ':'])
catch
endtry


" Results:  :copen, :cn, :cp
" Ex: :grep -f c++/comments %
" Ex: :grep -tc++ FIXME
if executable('ugrep')
    set grepprg=ugrep\ -RInk\ -j\ -u\ --tabs=1\ --ignore-files
    set grepformat=%f:%l:%c:%m,%f+%l+%c+%m,%-G%f\\\|%l\\\|%c\\\|%m
endif


" Yank to system clipboard with Y
nnoremap yy yy
vnoremap y y
nnoremap YY "+yy
nnoremap Y "+y
vnoremap Y "+y


{% if nvim %}
exec 'luafile' g:MYVIMRC_DIR . '/config.lua'
{% endif %}

if filereadable(expand("~/.vim_custom.vim")) && match(readfile(expand("~/.vim_custom.vim")),"colorscheme")==-1
  silent! colorscheme gruvbox-material
elseif !filereadable(expand("~/.vim_custom.vim"))
  silent! colorscheme gruvbox-material
endif

silent! source ~/.vim_custom.vim
silent! exec 'source' g:MYVIMRC_DIR . '/hterm-copy.vim'

if filereadable("workspace.vim")
  silent! source workspace.vim
endif
