let mapleader = ","
let g:mapleader = ","


" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set t_Co=256
    set guitablabel=%M\ %t
endif


" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry


" Return to last edit position when opening files (You want this!)
autocmd! BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif


" Do :help cope if you are unsure what cope is. It's super useful!
"
" When you search with vimgrep, display your results in cope by doing:
"   <leader>cc
"
" To go to the next search result do:
"   <leader>n
"
" To go to the previous search results do:
"   <leader>p

map <leader>gcc :botright cope<cr>
map <leader>gco ggVGy:tabnew %<cr>:set syntax=qf<cr>pgg
map <leader>gn :cn<cr>
map <leader>gp :cp<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

function! Num_Toggle()
   exe "NumbersToggle"
   exe "set number!"
endfunction

function! ToggleMouse()
    " check if mouse is enabled
    if &mouse == 'a'
        " disable mouse
        set mouse=
    else
        " enable mouse everywhere
        set mouse=a
    endif
endfunc

function! ToggleStatusLine()
    if &laststatus==0
        set laststatus=2
    else
        set laststatus=0
    endif
endfunc

if has('gui_running')
    set background=light
else
    set background=dark
endif

{% if nvim %}
{% else %}

if &shell =~# 'fish$'
    set shell=sh
endif

{% endif %}

set nocompatible              " be iMproved
filetype off                  " required before plugins


set rtp+=~/.fzf/

call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'vim-scripts/grep.vim'
Plug 'ervandew/supertab'
Plug 'tpope/vim-fugitive'
Plug 'godlygeek/tabular'
Plug 'DevWurm/autosession.vim'
Plug 'ntpeters/vim-better-whitespace'
Plug 'gagoar/stripwhitespaces'
Plug 'scrooloose/syntastic'
Plug 'mattn/emmet-vim'
Plug 'vim-expand-region'
Plug 'bling/vim-airline'
Plug 'osyo-manga/vim-over'
Plug 'majutsushi/tagbar'
Plug 'Shougo/unite.vim'

Plug 'dag/vim-fish'

"Plug 'MattesGroeger/vim-bookmarks'
"Plug 'thinca/vim-quickrun'
"Plug 'mkitt/tabline.vim'
"Plug 'mru.vim'

{% if programming %}

Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'
Plug 'junegunn/fzf.vim'

Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'

Plug 'vim-markdown-preview'
"
Plug 'ya790206/vim-multiterm'
Plug 'myusuf3/numbers.vim'
Plug 'mbbill/undotree'

" Plugin to toggle, display and navigate marks
Plug 'kshenoy/vim-signature'

Plug 'Shougo/vimproc.vim'
Plug 'Shougo/vimshell.vim'
Plug 'Chiel92/vim-autoformat'

" Lang
Plug 'fatih/vim-go'
Plug 'derekwyatt/vim-scala'
Plug 'pangloss/vim-javascript'
Plug 'plasticboy/vim-markdown'
Plug 'pearofducks/ansible-vim'
Plug 'nvie/vim-flake8'
"Plug 'dart-lang/dart-vim-plugin'
"Plug 'keith/swift.vim'
"Plug 'gre/play2vim'
Plug 'ya790206/vim-mecury-lang'
Plug 'davidhalter/jedi-vim'
Plug 'justmao945/vim-clang'
Plug 'rhysd/vim-clang-format'

"Plug 'vim-scripts/OmniCppComplete'
"Plug 'neomake/neomake'
"Plug 'adimit/prolog.vim'
"Plug 'nathanaelkane/vim-indent-guides'
"Plug 'JesseKPhillips/d.vim'
"Plug 'HerringtonDarkholme/w3m.vim'
"Plug 'mhinz/vim-startify'
"Plug 'suan/vim-instant-markdown'

{% if nvim %}
Plug 'Shougo/deoplete.nvim'
Plug 'zchee/deoplete-go', { 'do': 'make'}
Plug 'zchee/deoplete-jedi'
Plug 'Shougo/neco-vim'
Plug 'Shougo/neco-syntax'
{% else %}
Plug 'Valloric/YouCompleteMe'
{% endif %}

{% else %}


{% endif %}
{% if nvim %}
Plug 'mhinz/neovim-remote'
"Plug 'kassio/neoterm', { 'commit': '9e33da0a' }
{% endif %}

call plug#end()

syntax enable
filetype plugin indent on     " required!


colorscheme darkblue


set nu
set keywordprg=sdcvh.sh
"set whichwrap+=h,l
set whichwrap+=<,>,[,],s,b
set cursorline

" Show tab line if there are more than one tab
set showtabline=1

" Set utf8 as standard encoding and en_US as the standard language
if !has('nvim')
    set encoding=utf8
endif

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Remember info about register, marks. And no highlight when started
set viminfo=<800,'10,h

" Show tab line if there are more than one tab
set showtabline=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Turn on the WiLd menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc

"Always show current position
set ruler

" Height of the command bar
set cmdheight=1

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Sets how many lines of history VIM has to remember
set history=700

" Set to auto read when a file is changed from the outside
set autoread

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

" Always show the status line
set laststatus=2

set completeopt="menu,preview,noinsert,noselect"

let g:jedi#completions_command = "<C-n>"
let popup_select_first = 0
let @/ = ""
let g:vim_markdown_folding_disabled=1
let NERDTreeMapOpenInTab='<TAB>'
let g:nerdtree_tabs_focus_on_files=1

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_nr_type = 2
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_tab_nr = 2
let g:airline#extensions#tabline#tab_min_count = 2
let g:airline#extensions#tabline#exclude_preview = 1
let g:airline#extensions#tabline#show_buffers = 0

let g:deoplete#enable_at_startup = 1

let g:vimshell_prompt_expr =
\ 'escape(fnamemodify(getcwd(), ":~").">", "\\[]()?! ")." "'
let g:vimshell_prompt_pattern = '^\%(\f\|\\.\)\+> '

let g:clang_c_completeopt = "menu,preview,noinsert,noselect"
let g:clang_cpp_completeopt = "menu,preview,noinsert,noselect"


" Autocmd
autocmd! InsertLeave,WinEnter * set cursorline
autocmd! InsertEnter,WinLeave * set nocursorline

autocmd! bufwritepost .vimrc source %
autocmd! bufwritepost init.vim source %
autocmd FileType c ClangFormatAutoEnable

augroup Binary
  au!
  au! BufReadPre  *.bin let &bin=1
  au! BufReadPost *.bin if &bin | %!xxd
  au! BufReadPost *.bin set ft=xxd | endif
  au! BufWritePre *.bin if &bin | %!xxd -r
  au! BufWritePre *.bin endif
  au! BufWritePost *.bin if &bin | %!xxd
  au! BufWritePost *.bin set nomod | endif
augroup END

" num toggle
command! Nu execute "call Num_Toggle()"

"Quit
command! Q execute "quit!"
command! Qa execute "quitall!"


" resize buffer
if bufwinnr(1)
  map = <C-W>+
  map - <C-W>-
  map } <C-W>>
  map { <C-W><
endif


" Use normal regex
" http://stevelosh.com/blog/2010/09/coming-home-to-vim
nnoremap / /\v
vnoremap / /\v


" Sudo to write
cnoremap w!! w !sudo tee % >/dev/null


" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>


" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>


" Fast saving
nmap <leader>sa :w!<cr>

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Close the current buffer
map <leader>bd :Bclose<cr>

" Close all the buffers
map <leader>ba :1,1000 bd!<cr>

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

map <C-n> :NERDTreeTabsToggle<CR>

" Tab mappings
map <leader>tn :tabnew %<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
nmap <C-t> :tabnew %<CR>
imap <C-t> <Esc>:tabnew %<CR>
noremap H gT
noremap L gt


" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,ss will toggle and untoggle spell checking
map <leader>spel :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>spen ]s
map <leader>spep [s


" Grep
" B for current buffer
" For example, Lines for Lines in loaded buffers.
" BLines for Lines in the current buffer
nmap <leader>gro :Grep<cr>
nmap <leader>grr :Rgrep<cr>
nmap <leader>ge :Egrep<cr>
nmap <leader>gl :Lines<cr
nmap <leader>gbl :BLines<cr>
nmap <leader>gc :Commits<cr>
nmap <leader>gbc :BCommits<cr>
nmap <leader>ga :Ag<cr>

" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSelection('gv')<CR>

" Open vimgrep and put the cursor in the right position
map <leader>gv :vimgrep // **/* <left><left><left><left><left><left><left>

" Vimgreps in the current file
map <leader><space> :vimgrep // <Home><right><right><right><right><right><right><right><right><right>


" close buffer/window
nmap <leader>qq :Bclose<cr>:q<cr>
nmap <leader>qw :q<cr>
nmap <leader>qb :Bclose<cr>

" State
nmap <leader>,n :call Num_Toggle()<cr>
nmap <leader>,w :set wrap!<cr>
nmap <leader>,p :setlocal paste!<cr>
nmap <leader>,m :call ToggleMouse()<cr>
nmap <leader>,s :call ToggleStatusLine()<cr>

" Find file in NERDTree
nmap <leader>ff :NERDTreeTabsFind<cr>

" Find  line in the current buffer
nmap <leader>fb :BLine
" Find  lines in loaded buffers
nmap <leader>fl :Line

" Command
nmap <leader>e :Commands<cr>
nmap <C-e> :Commands<cr>

" Tag list
nmap <C-s> :Tagbar<cr>

" Bookmarks keybinding
"nmap <Leader>bt <Plug>BookmarkToggle
"nmap <Leader>bi <Plug>BookmarkAnnotate
"nmap <Leader>ba <Plug>BookmarkShowAll
"nmap <Leader>bj <Plug>BookmarkNext
"nmap <Leader>bk <Plug>BookmarkPrev
"nmap <Leader>bc <Plug>BookmarkClear
"nmap <Leader>bx <Plug>BookmarkClearAll
"nmap <Leader>bk <Plug>BookmarkMoveUp
"nmap <Leader>bj <Plug>BookmarkMoveDown

" Use down/up for <C-n>/<C-p>
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"

nnoremap <C-u> :UndotreeToggle<cr>

" Find file/buffer
nnoremap <C-p> :FZF<cr>
nnoremap <c-o> :Buffers<cr>

"nnoremap <leader>w :W3mTab google

" Marks
nnoremap mm  :Marks<cr>

" Resize buffer
nnoremap sa  :resize +1000<cr>
nnoremap si  :resize -1000<cr>
nnoremap sm  <c-w><c-=>

" Find window
nnoremap <a-/>  :Windows<cr>
imap     <a-/>  :Windows<cr>

" Auto complete for all word
imap     <c-a>  <c-x><c-n>


{% if nvim %}

" Alt-num to switch tab
noremap <A-0> 0gt
noremap <A-1> 1gt
noremap <A-2> 2gt
noremap <A-3> 3gt
noremap <A-4> 4gt
noremap <A-5> 5gt
noremap <A-6> 6gt
noremap <A-7> 7gt
noremap <A-8> 8gt
noremap <A-9> 9gt
noremap <A-0> 0gt

{% else %}

" Alt-num to switch tab
execute "set <M-0>=\e0"
noremap <M-0> 0gt
execute "set <M-1>=\e1"
noremap <M-1> 1gt
execute "set <M-2>=\e2"
noremap <M-2> 2gt
execute "set <M-3>=\e3"
noremap <M-3> 3gt
execute "set <M-4>=\e4"
noremap <M-4> 4gt
execute "set <M-5>=\e5"
noremap <M-5> 5gt
execute "set <M-6>=\e6"
noremap <M-6> 6gt
execute "set <M-7>=\e7"
noremap <M-7> 7gt
execute "set <M-8>=\e8"
noremap <M-8> 8gt
execute "set <M-9>=\e9"
noremap <M-9> 9gt

{% endif %}

map <Esc>h <Nop>
map <Esc>l <Nop>

" Delete one word
inoremap <C-e> <Esc>dwi

" Forware/backware word
inoremap <C-f> <Esc>w i
inoremap <C-b> <Esc>bi

" Paste text
inoremap <C-v> <Esc>pi

" insert new after the line
inoremap <C-o> <Esc>o

" Paste text from clipboard
vnoremap <c-c> "+y
vnoremap <Return> "+y

"Quickly move current line
nnoremap [e  :<c-u>execute 'move -1-'. v:count1<cr>
nnoremap ]e  :<c-u>execute 'move +'. v:count1<cr>

inoremap <C-c>     <Plug>(neosnippet_expand_or_jump)

" keybinding about lang
au FileType go nmap <leader>lr <Plug>(go-run)
au FileType go nmap <leader>lb <Plug>(go-build)
au FileType go nmap <leader>lt <Plug>(go-test)
au FileType go nmap <leader>lc <Plug>(go-coverage)
au FileType go nmap <Leader>lds <Plug>(go-def-split)
au FileType go nmap <Leader>ldv <Plug>(go-def-vertical)
au FileType go nmap <Leader>ldt <Plug>(go-def-tab)
au FileType go nmap <Leader>lgd <Plug>(go-doc)
au FileType go nmap <Leader>lgv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>ls <Plug>(go-implements)
au FileType go nmap <Leader>li <Plug>(go-info)
au FileType go nmap <Leader>le <Plug>(go-rename)

let g:jedi#goto_command = "<leader>lg"
let g:jedi#goto_assignments_command = "<leader>la"
let g:jedi#goto_definitions_command = "<leader>ld"
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>lu"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>lr"


{% if nvim %}

" Disable mouse
set mouse=""

" open new terminal in new tab/buffer.
map <leader>tt :tabnew %<cr>:terminal<cr>
map <leader>tb :split<cr><c-w>j:terminal<cr>

" Tab switch
tnoremap <A-1> <C-\><C-n>1gti
tnoremap <A-2> <C-\><C-n>2gti
tnoremap <A-3> <C-\><C-n>3gti
tnoremap <A-4> <C-\><C-n>4gti
tnoremap <A-5> <C-\><C-n>5gti
tnoremap <A-6> <C-\><C-n>6gti
tnoremap <A-7> <C-\><C-n>7gti
tnoremap <A-8> <C-\><C-n>8gti
tnoremap <A-9> <C-\><C-n>9gti
tnoremap <A-0> <C-\><C-n>0gti

" Tab switch
imap <A-1> <Esc>1gti
imap <A-2> <Esc>2gti
imap <A-3> <Esc>3gti
imap <A-4> <Esc>4gti
imap <A-5> <Esc>5gti
imap <A-6> <Esc>6gti
imap <A-7> <Esc>7gti
imap <A-8> <Esc>8gti
imap <A-9> <Esc>9gti
imap <A-0> <Esc>0gti

" Buffer navigation
tnoremap <C-[> <C-\><C-n>
tnoremap <Insert> <C-\><C-n>
tnoremap <A-h> <C-\><C-n><C-w>h
tnoremap <A-j> <C-\><C-n><C-w>j
tnoremap <A-k> <C-\><C-n><C-w>k
tnoremap <A-l> <C-\><C-n><C-w>l
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l
imap <A-h> <Esc><C-w>h
imap <A-j> <Esc><C-w>j
imap <A-k> <Esc><C-w>k
imap <A-l> <Esc><C-w>l

" Find files/buffers
nnoremap <A-p> :FZF<cr>
tnoremap <A-p> <C-\><C-n>:FZF<cr>i
nnoremap <A-o> :Buffers<cr>
tnoremap <A-o> <C-\><C-n>Buffers<cr>i

" Resize buffer
nmap <silent> <A-q>  :resize -1000<cr>
nmap <silent> <A-w>  <c-w><c-=>
nmap <silent> <A-e>  :resize +1000<cr>
nmap <silent> <A-r>  :vertical resize -1000<cr>
nmap <silent> <A-t>  :vertical resize +1000<cr>
imap <silent> <A-q>  <Esc>:resize -1000<cr>i
imap <silent> <A-w>  <Esc><c-w><c-=>i
imap <silent> <A-e>  <Esc>:resize +1000<cr>i
imap <silent> <A-r>  <Esc>:vertical resize -1000<cr>i
imap <silent> <A-t>  <Esc>:vertical resize +1000<cr>i
tnoremap <silent> <A-q>  <C-\><C-n>:resize -1000<cr>i
tnoremap <silent> <A-w>  <C-\><C-n><c-w><c-=>i
tnoremap <silent> <A-e>  <C-\><C-n>:resize +1000<cr>i
tnoremap <silent> <A-r>  <C-\><C-n>:vertical resize -1000<cr>i
tnoremap <silent> <A-t>  <C-\><C-n>:vertical resize +1000<cr>i

" Paste text
tnoremap <A-v> <C-\><C-n>pi
inoremap <A-v> <Esc>pi

{% endif %}
